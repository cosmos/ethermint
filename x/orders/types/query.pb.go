// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ethermint/orders/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryDerivativeMarketsRequest defines the request type for the Query/DerivativeMarkets RPC method
type QueryDerivativeMarketsRequest struct {
}

func (m *QueryDerivativeMarketsRequest) Reset()         { *m = QueryDerivativeMarketsRequest{} }
func (m *QueryDerivativeMarketsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeMarketsRequest) ProtoMessage()    {}
func (*QueryDerivativeMarketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{0}
}
func (m *QueryDerivativeMarketsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeMarketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeMarketsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeMarketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeMarketsRequest.Merge(m, src)
}
func (m *QueryDerivativeMarketsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeMarketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeMarketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeMarketsRequest proto.InternalMessageInfo

// QueryDerivativeMarketsResponse defines the response type for Query/DerivativeMarkets RPC method.
type QueryDerivativeMarketsResponse struct {
	// Array of found derivative markets
	Markets []*DerivativeMarket `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets,omitempty"`
}

func (m *QueryDerivativeMarketsResponse) Reset()         { *m = QueryDerivativeMarketsResponse{} }
func (m *QueryDerivativeMarketsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeMarketsResponse) ProtoMessage()    {}
func (*QueryDerivativeMarketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{1}
}
func (m *QueryDerivativeMarketsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeMarketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeMarketsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeMarketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeMarketsResponse.Merge(m, src)
}
func (m *QueryDerivativeMarketsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeMarketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeMarketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeMarketsResponse proto.InternalMessageInfo

func (m *QueryDerivativeMarketsResponse) GetMarkets() []*DerivativeMarket {
	if m != nil {
		return m.Markets
	}
	return nil
}

type QueryContractSetRequest struct {
}

func (m *QueryContractSetRequest) Reset()         { *m = QueryContractSetRequest{} }
func (m *QueryContractSetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryContractSetRequest) ProtoMessage()    {}
func (*QueryContractSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{2}
}
func (m *QueryContractSetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryContractSetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryContractSetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryContractSetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryContractSetRequest.Merge(m, src)
}
func (m *QueryContractSetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryContractSetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryContractSetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryContractSetRequest proto.InternalMessageInfo

type QueryContractSetResponse struct {
	// Contract Set.
	ContractSet *ContractSet `protobuf:"bytes,1,opt,name=contract_set,json=contractSet,proto3" json:"contract_set,omitempty"`
}

func (m *QueryContractSetResponse) Reset()         { *m = QueryContractSetResponse{} }
func (m *QueryContractSetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryContractSetResponse) ProtoMessage()    {}
func (*QueryContractSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{3}
}
func (m *QueryContractSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryContractSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryContractSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryContractSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryContractSetResponse.Merge(m, src)
}
func (m *QueryContractSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryContractSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryContractSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryContractSetResponse proto.InternalMessageInfo

func (m *QueryContractSetResponse) GetContractSet() *ContractSet {
	if m != nil {
		return m.ContractSet
	}
	return nil
}

type QueryEvmSyncStatusRequest struct {
}

func (m *QueryEvmSyncStatusRequest) Reset()         { *m = QueryEvmSyncStatusRequest{} }
func (m *QueryEvmSyncStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEvmSyncStatusRequest) ProtoMessage()    {}
func (*QueryEvmSyncStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{4}
}
func (m *QueryEvmSyncStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEvmSyncStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEvmSyncStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEvmSyncStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEvmSyncStatusRequest.Merge(m, src)
}
func (m *QueryEvmSyncStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEvmSyncStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEvmSyncStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEvmSyncStatusRequest proto.InternalMessageInfo

type QueryEvmSyncStatusResponse struct {
	// EVM sync status
	SyncStatus *EvmSyncStatus `protobuf:"bytes,1,opt,name=sync_status,json=syncStatus,proto3" json:"sync_status,omitempty"`
}

func (m *QueryEvmSyncStatusResponse) Reset()         { *m = QueryEvmSyncStatusResponse{} }
func (m *QueryEvmSyncStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEvmSyncStatusResponse) ProtoMessage()    {}
func (*QueryEvmSyncStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{5}
}
func (m *QueryEvmSyncStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEvmSyncStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEvmSyncStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEvmSyncStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEvmSyncStatusResponse.Merge(m, src)
}
func (m *QueryEvmSyncStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEvmSyncStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEvmSyncStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEvmSyncStatusResponse proto.InternalMessageInfo

func (m *QueryEvmSyncStatusResponse) GetSyncStatus() *EvmSyncStatus {
	if m != nil {
		return m.SyncStatus
	}
	return nil
}

type QuerySoftCancelledOrdersRequest struct {
	// The hashes of orders to be checked whether they can be soft-cancelled
	OrderHashes []string `protobuf:"bytes,1,rep,name=order_hashes,json=orderHashes,proto3" json:"order_hashes,omitempty"`
	// Ethereum Chain ID of the transaction
	ChainId int64 `protobuf:"zigzag64,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QuerySoftCancelledOrdersRequest) Reset()         { *m = QuerySoftCancelledOrdersRequest{} }
func (m *QuerySoftCancelledOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySoftCancelledOrdersRequest) ProtoMessage()    {}
func (*QuerySoftCancelledOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{6}
}
func (m *QuerySoftCancelledOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySoftCancelledOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySoftCancelledOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySoftCancelledOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySoftCancelledOrdersRequest.Merge(m, src)
}
func (m *QuerySoftCancelledOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySoftCancelledOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySoftCancelledOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySoftCancelledOrdersRequest proto.InternalMessageInfo

func (m *QuerySoftCancelledOrdersRequest) GetOrderHashes() []string {
	if m != nil {
		return m.OrderHashes
	}
	return nil
}

func (m *QuerySoftCancelledOrdersRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type QuerySoftCancelledOrdersResponse struct {
	// The subset of orders that have been soft-cancelled
	OrderHashes []string `protobuf:"bytes,1,rep,name=order_hashes,json=orderHashes,proto3" json:"order_hashes,omitempty"`
}

func (m *QuerySoftCancelledOrdersResponse) Reset()         { *m = QuerySoftCancelledOrdersResponse{} }
func (m *QuerySoftCancelledOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySoftCancelledOrdersResponse) ProtoMessage()    {}
func (*QuerySoftCancelledOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{7}
}
func (m *QuerySoftCancelledOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySoftCancelledOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySoftCancelledOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySoftCancelledOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySoftCancelledOrdersResponse.Merge(m, src)
}
func (m *QuerySoftCancelledOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySoftCancelledOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySoftCancelledOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySoftCancelledOrdersResponse proto.InternalMessageInfo

func (m *QuerySoftCancelledOrdersResponse) GetOrderHashes() []string {
	if m != nil {
		return m.OrderHashes
	}
	return nil
}

type QueryOrderRequest struct {
	// The hash of the desired 0x order.
	OrderHash string `protobuf:"bytes,1,opt,name=order_hash,json=orderHash,proto3" json:"order_hash,omitempty"`
}

func (m *QueryOrderRequest) Reset()         { *m = QueryOrderRequest{} }
func (m *QueryOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOrderRequest) ProtoMessage()    {}
func (*QueryOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{8}
}
func (m *QueryOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderRequest.Merge(m, src)
}
func (m *QueryOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderRequest proto.InternalMessageInfo

func (m *QueryOrderRequest) GetOrderHash() string {
	if m != nil {
		return m.OrderHash
	}
	return ""
}

type QueryOrderResponse struct {
	// Order data
	Order *Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (m *QueryOrderResponse) Reset()         { *m = QueryOrderResponse{} }
func (m *QueryOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOrderResponse) ProtoMessage()    {}
func (*QueryOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{9}
}
func (m *QueryOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrderResponse.Merge(m, src)
}
func (m *QueryOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrderResponse proto.InternalMessageInfo

func (m *QueryOrderResponse) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

type QueryActiveOrderRequest struct {
	// The hash of the desired 0x order.
	OrderHash string `protobuf:"bytes,1,opt,name=order_hash,json=orderHash,proto3" json:"order_hash,omitempty"`
}

func (m *QueryActiveOrderRequest) Reset()         { *m = QueryActiveOrderRequest{} }
func (m *QueryActiveOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryActiveOrderRequest) ProtoMessage()    {}
func (*QueryActiveOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{10}
}
func (m *QueryActiveOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveOrderRequest.Merge(m, src)
}
func (m *QueryActiveOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveOrderRequest proto.InternalMessageInfo

func (m *QueryActiveOrderRequest) GetOrderHash() string {
	if m != nil {
		return m.OrderHash
	}
	return ""
}

type QueryActiveOrderResponse struct {
	// Order data
	Order *Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (m *QueryActiveOrderResponse) Reset()         { *m = QueryActiveOrderResponse{} }
func (m *QueryActiveOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryActiveOrderResponse) ProtoMessage()    {}
func (*QueryActiveOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{11}
}
func (m *QueryActiveOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveOrderResponse.Merge(m, src)
}
func (m *QueryActiveOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveOrderResponse proto.InternalMessageInfo

func (m *QueryActiveOrderResponse) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

type QueryZeroExTransactionRequest struct {
	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *QueryZeroExTransactionRequest) Reset()         { *m = QueryZeroExTransactionRequest{} }
func (m *QueryZeroExTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryZeroExTransactionRequest) ProtoMessage()    {}
func (*QueryZeroExTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{12}
}
func (m *QueryZeroExTransactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryZeroExTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryZeroExTransactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryZeroExTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryZeroExTransactionRequest.Merge(m, src)
}
func (m *QueryZeroExTransactionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryZeroExTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryZeroExTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryZeroExTransactionRequest proto.InternalMessageInfo

func (m *QueryZeroExTransactionRequest) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

type QueryZeroExTransactionResponse struct {
	TxType             int64                     `protobuf:"zigzag64,1,opt,name=tx_type,json=txType,proto3" json:"tx_type,omitempty"`
	FillRequests       []*OrderFillRequest       `protobuf:"bytes,2,rep,name=fill_requests,json=fillRequests,proto3" json:"fill_requests,omitempty"`
	SoftCancelRequests []*OrderSoftCancelRequest `protobuf:"bytes,3,rep,name=soft_cancel_requests,json=softCancelRequests,proto3" json:"soft_cancel_requests,omitempty"`
}

func (m *QueryZeroExTransactionResponse) Reset()         { *m = QueryZeroExTransactionResponse{} }
func (m *QueryZeroExTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryZeroExTransactionResponse) ProtoMessage()    {}
func (*QueryZeroExTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{13}
}
func (m *QueryZeroExTransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryZeroExTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryZeroExTransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryZeroExTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryZeroExTransactionResponse.Merge(m, src)
}
func (m *QueryZeroExTransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryZeroExTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryZeroExTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryZeroExTransactionResponse proto.InternalMessageInfo

func (m *QueryZeroExTransactionResponse) GetTxType() int64 {
	if m != nil {
		return m.TxType
	}
	return 0
}

func (m *QueryZeroExTransactionResponse) GetFillRequests() []*OrderFillRequest {
	if m != nil {
		return m.FillRequests
	}
	return nil
}

func (m *QueryZeroExTransactionResponse) GetSoftCancelRequests() []*OrderSoftCancelRequest {
	if m != nil {
		return m.SoftCancelRequests
	}
	return nil
}

type QueryArchiveOrderRequest struct {
	// The hash of the desired 0x order.
	OrderHash string `protobuf:"bytes,1,opt,name=order_hash,json=orderHash,proto3" json:"order_hash,omitempty"`
}

func (m *QueryArchiveOrderRequest) Reset()         { *m = QueryArchiveOrderRequest{} }
func (m *QueryArchiveOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryArchiveOrderRequest) ProtoMessage()    {}
func (*QueryArchiveOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{14}
}
func (m *QueryArchiveOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryArchiveOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryArchiveOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryArchiveOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryArchiveOrderRequest.Merge(m, src)
}
func (m *QueryArchiveOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryArchiveOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryArchiveOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryArchiveOrderRequest proto.InternalMessageInfo

func (m *QueryArchiveOrderRequest) GetOrderHash() string {
	if m != nil {
		return m.OrderHash
	}
	return ""
}

type QueryArchiveOrderResponse struct {
	// Order data
	Order *Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (m *QueryArchiveOrderResponse) Reset()         { *m = QueryArchiveOrderResponse{} }
func (m *QueryArchiveOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryArchiveOrderResponse) ProtoMessage()    {}
func (*QueryArchiveOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{15}
}
func (m *QueryArchiveOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryArchiveOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryArchiveOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryArchiveOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryArchiveOrderResponse.Merge(m, src)
}
func (m *QueryArchiveOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryArchiveOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryArchiveOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryArchiveOrderResponse proto.InternalMessageInfo

func (m *QueryArchiveOrderResponse) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

type OrderFilters struct {
	// for derivatives
	ContractPriceBound string `protobuf:"bytes,1,opt,name=contract_price_bound,json=contractPriceBound,proto3" json:"contract_price_bound,omitempty"`
	MarketId           string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	IsLong             bool   `protobuf:"varint,3,opt,name=is_long,json=isLong,proto3" json:"is_long,omitempty"`
	// for normal orders
	NotExpired          bool   `protobuf:"varint,4,opt,name=not_expired,json=notExpired,proto3" json:"not_expired,omitempty"`
	MakerAssetAddress   string `protobuf:"bytes,5,opt,name=maker_asset_address,json=makerAssetAddress,proto3" json:"maker_asset_address,omitempty"`
	TakerAssetAddress   string `protobuf:"bytes,6,opt,name=taker_asset_address,json=takerAssetAddress,proto3" json:"taker_asset_address,omitempty"`
	ExchangeAddress     string `protobuf:"bytes,7,opt,name=exchange_address,json=exchangeAddress,proto3" json:"exchange_address,omitempty"`
	SenderAddress       string `protobuf:"bytes,8,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	MakerAssetData      string `protobuf:"bytes,9,opt,name=maker_asset_data,json=makerAssetData,proto3" json:"maker_asset_data,omitempty"`
	TakerAssetData      string `protobuf:"bytes,10,opt,name=taker_asset_data,json=takerAssetData,proto3" json:"taker_asset_data,omitempty"`
	MakerAssetAmount    string `protobuf:"bytes,11,opt,name=maker_asset_amount,json=makerAssetAmount,proto3" json:"maker_asset_amount,omitempty"`
	TakerAssetAmount    string `protobuf:"bytes,12,opt,name=taker_asset_amount,json=takerAssetAmount,proto3" json:"taker_asset_amount,omitempty"`
	MakerAddress        string `protobuf:"bytes,13,opt,name=maker_address,json=makerAddress,proto3" json:"maker_address,omitempty"`
	NotMakerAddress     string `protobuf:"bytes,14,opt,name=not_maker_address,json=notMakerAddress,proto3" json:"not_maker_address,omitempty"`
	TakerAddress        string `protobuf:"bytes,15,opt,name=taker_address,json=takerAddress,proto3" json:"taker_address,omitempty"`
	TraderAddress       string `protobuf:"bytes,16,opt,name=trader_address,json=traderAddress,proto3" json:"trader_address,omitempty"`
	FeeRecipientAddress string `protobuf:"bytes,17,opt,name=fee_recipient_address,json=feeRecipientAddress,proto3" json:"fee_recipient_address,omitempty"`
	// Filters orders with the specified makerFeeAssetData
	MakerFeeAssetData string `protobuf:"bytes,18,opt,name=maker_fee_asset_data,json=makerFeeAssetData,proto3" json:"maker_fee_asset_data,omitempty"`
	// Filters orders with the specified takerFeeAssetData
	TakerFeeAssetData string `protobuf:"bytes,19,opt,name=taker_fee_asset_data,json=takerFeeAssetData,proto3" json:"taker_fee_asset_data,omitempty"`
}

func (m *OrderFilters) Reset()         { *m = OrderFilters{} }
func (m *OrderFilters) String() string { return proto.CompactTextString(m) }
func (*OrderFilters) ProtoMessage()    {}
func (*OrderFilters) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{16}
}
func (m *OrderFilters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderFilters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderFilters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderFilters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderFilters.Merge(m, src)
}
func (m *OrderFilters) XXX_Size() int {
	return m.Size()
}
func (m *OrderFilters) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderFilters.DiscardUnknown(m)
}

var xxx_messageInfo_OrderFilters proto.InternalMessageInfo

func (m *OrderFilters) GetContractPriceBound() string {
	if m != nil {
		return m.ContractPriceBound
	}
	return ""
}

func (m *OrderFilters) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *OrderFilters) GetIsLong() bool {
	if m != nil {
		return m.IsLong
	}
	return false
}

func (m *OrderFilters) GetNotExpired() bool {
	if m != nil {
		return m.NotExpired
	}
	return false
}

func (m *OrderFilters) GetMakerAssetAddress() string {
	if m != nil {
		return m.MakerAssetAddress
	}
	return ""
}

func (m *OrderFilters) GetTakerAssetAddress() string {
	if m != nil {
		return m.TakerAssetAddress
	}
	return ""
}

func (m *OrderFilters) GetExchangeAddress() string {
	if m != nil {
		return m.ExchangeAddress
	}
	return ""
}

func (m *OrderFilters) GetSenderAddress() string {
	if m != nil {
		return m.SenderAddress
	}
	return ""
}

func (m *OrderFilters) GetMakerAssetData() string {
	if m != nil {
		return m.MakerAssetData
	}
	return ""
}

func (m *OrderFilters) GetTakerAssetData() string {
	if m != nil {
		return m.TakerAssetData
	}
	return ""
}

func (m *OrderFilters) GetMakerAssetAmount() string {
	if m != nil {
		return m.MakerAssetAmount
	}
	return ""
}

func (m *OrderFilters) GetTakerAssetAmount() string {
	if m != nil {
		return m.TakerAssetAmount
	}
	return ""
}

func (m *OrderFilters) GetMakerAddress() string {
	if m != nil {
		return m.MakerAddress
	}
	return ""
}

func (m *OrderFilters) GetNotMakerAddress() string {
	if m != nil {
		return m.NotMakerAddress
	}
	return ""
}

func (m *OrderFilters) GetTakerAddress() string {
	if m != nil {
		return m.TakerAddress
	}
	return ""
}

func (m *OrderFilters) GetTraderAddress() string {
	if m != nil {
		return m.TraderAddress
	}
	return ""
}

func (m *OrderFilters) GetFeeRecipientAddress() string {
	if m != nil {
		return m.FeeRecipientAddress
	}
	return ""
}

func (m *OrderFilters) GetMakerFeeAssetData() string {
	if m != nil {
		return m.MakerFeeAssetData
	}
	return ""
}

func (m *OrderFilters) GetTakerFeeAssetData() string {
	if m != nil {
		return m.TakerFeeAssetData
	}
	return ""
}

type QueryOrdersRequest struct {
	Filters *OrderFilters `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
	// Filter by status of the order
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Filter by collection of the order
	Collection string `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	// Filter by trade pair hash
	TradePairHash string `protobuf:"bytes,4,opt,name=trade_pair_hash,json=tradePairHash,proto3" json:"trade_pair_hash,omitempty"`
}

func (m *QueryOrdersRequest) Reset()         { *m = QueryOrdersRequest{} }
func (m *QueryOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOrdersRequest) ProtoMessage()    {}
func (*QueryOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{17}
}
func (m *QueryOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrdersRequest.Merge(m, src)
}
func (m *QueryOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrdersRequest proto.InternalMessageInfo

func (m *QueryOrdersRequest) GetFilters() *OrderFilters {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *QueryOrdersRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QueryOrdersRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *QueryOrdersRequest) GetTradePairHash() string {
	if m != nil {
		return m.TradePairHash
	}
	return ""
}

type QuerySpotOrdersRequest struct {
	// Filter by status of the order
	Status string `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	// Filter by collection of the order
	Collection string `protobuf:"bytes,12,opt,name=collection,proto3" json:"collection,omitempty"`
	// Filter by trade pair hash
	TradePairHash string `protobuf:"bytes,13,opt,name=trade_pair_hash,json=tradePairHash,proto3" json:"trade_pair_hash,omitempty"`
	// Enabled sort by VDF (1 = asc, -1 = desc)
	SortByVdf int32 `protobuf:"zigzag32,14,opt,name=sort_by_vdf,json=sortByVdf,proto3" json:"sort_by_vdf,omitempty"`
	// Filters orders where the maker asset is of certain asset proxy id.
	MakerAssetProxyId string `protobuf:"bytes,21,opt,name=maker_asset_proxy_id,json=makerAssetProxyId,proto3" json:"maker_asset_proxy_id,omitempty"`
	// Filters orders where the taker asset is of certain asset proxy id.
	TakerAssetProxyId string `protobuf:"bytes,22,opt,name=taker_asset_proxy_id,json=takerAssetProxyId,proto3" json:"taker_asset_proxy_id,omitempty"`
	// Filters orders where the contract address for the maker asset matches the
	// value specified.
	MakerAssetAddress string `protobuf:"bytes,23,opt,name=maker_asset_address,json=makerAssetAddress,proto3" json:"maker_asset_address,omitempty"`
	// Filters orders where the contract address for the taker asset matches the
	// value specified.
	TakerAssetAddress string `protobuf:"bytes,24,opt,name=taker_asset_address,json=takerAssetAddress,proto3" json:"taker_asset_address,omitempty"`
	// Filters orders created for this exchange address
	ExchangeAddress string `protobuf:"bytes,31,opt,name=exchange_address,json=exchangeAddress,proto3" json:"exchange_address,omitempty"`
	// Filters orders with the specified senderAddress
	SenderAddress string `protobuf:"bytes,32,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
	// Filters orders with the specified makerAssetData
	MakerAssetData string `protobuf:"bytes,33,opt,name=maker_asset_data,json=makerAssetData,proto3" json:"maker_asset_data,omitempty"`
	// Filters orders with the specified takerAssetData
	TakerAssetData string `protobuf:"bytes,34,opt,name=taker_asset_data,json=takerAssetData,proto3" json:"taker_asset_data,omitempty"`
	// Filters orders with the specified makerFeeAssetData
	MakerFeeAssetData string `protobuf:"bytes,35,opt,name=maker_fee_asset_data,json=makerFeeAssetData,proto3" json:"maker_fee_asset_data,omitempty"`
	// Filters orders with the specified takerFeeAssetData
	TakerFeeAssetData string `protobuf:"bytes,36,opt,name=taker_fee_asset_data,json=takerFeeAssetData,proto3" json:"taker_fee_asset_data,omitempty"`
	// Filters orders where either makerAssetData or takerAssetData has the value
	// specified
	TraderAssetData string `protobuf:"bytes,37,opt,name=trader_asset_data,json=traderAssetData,proto3" json:"trader_asset_data,omitempty"`
	// Filters orders with the specified makerAddress
	MakerAddress string `protobuf:"bytes,38,opt,name=maker_address,json=makerAddress,proto3" json:"maker_address,omitempty"`
	// Filters orders with the specified takerAddress
	TakerAddress string `protobuf:"bytes,39,opt,name=taker_address,json=takerAddress,proto3" json:"taker_address,omitempty"`
	// Filters orders where either makerAddress or takerAddress has the value
	// specified
	TraderAddress string `protobuf:"bytes,40,opt,name=trader_address,json=traderAddress,proto3" json:"trader_address,omitempty"`
	// Filters orders where feeRecipientAddress is feeRecipient address
	FeeRecipientAddress string `protobuf:"bytes,41,opt,name=fee_recipient_address,json=feeRecipientAddress,proto3" json:"fee_recipient_address,omitempty"`
}

func (m *QuerySpotOrdersRequest) Reset()         { *m = QuerySpotOrdersRequest{} }
func (m *QuerySpotOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpotOrdersRequest) ProtoMessage()    {}
func (*QuerySpotOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{18}
}
func (m *QuerySpotOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotOrdersRequest.Merge(m, src)
}
func (m *QuerySpotOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotOrdersRequest proto.InternalMessageInfo

func (m *QuerySpotOrdersRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QuerySpotOrdersRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *QuerySpotOrdersRequest) GetTradePairHash() string {
	if m != nil {
		return m.TradePairHash
	}
	return ""
}

func (m *QuerySpotOrdersRequest) GetSortByVdf() int32 {
	if m != nil {
		return m.SortByVdf
	}
	return 0
}

func (m *QuerySpotOrdersRequest) GetMakerAssetProxyId() string {
	if m != nil {
		return m.MakerAssetProxyId
	}
	return ""
}

func (m *QuerySpotOrdersRequest) GetTakerAssetProxyId() string {
	if m != nil {
		return m.TakerAssetProxyId
	}
	return ""
}

func (m *QuerySpotOrdersRequest) GetMakerAssetAddress() string {
	if m != nil {
		return m.MakerAssetAddress
	}
	return ""
}

func (m *QuerySpotOrdersRequest) GetTakerAssetAddress() string {
	if m != nil {
		return m.TakerAssetAddress
	}
	return ""
}

func (m *QuerySpotOrdersRequest) GetExchangeAddress() string {
	if m != nil {
		return m.ExchangeAddress
	}
	return ""
}

func (m *QuerySpotOrdersRequest) GetSenderAddress() string {
	if m != nil {
		return m.SenderAddress
	}
	return ""
}

func (m *QuerySpotOrdersRequest) GetMakerAssetData() string {
	if m != nil {
		return m.MakerAssetData
	}
	return ""
}

func (m *QuerySpotOrdersRequest) GetTakerAssetData() string {
	if m != nil {
		return m.TakerAssetData
	}
	return ""
}

func (m *QuerySpotOrdersRequest) GetMakerFeeAssetData() string {
	if m != nil {
		return m.MakerFeeAssetData
	}
	return ""
}

func (m *QuerySpotOrdersRequest) GetTakerFeeAssetData() string {
	if m != nil {
		return m.TakerFeeAssetData
	}
	return ""
}

func (m *QuerySpotOrdersRequest) GetTraderAssetData() string {
	if m != nil {
		return m.TraderAssetData
	}
	return ""
}

func (m *QuerySpotOrdersRequest) GetMakerAddress() string {
	if m != nil {
		return m.MakerAddress
	}
	return ""
}

func (m *QuerySpotOrdersRequest) GetTakerAddress() string {
	if m != nil {
		return m.TakerAddress
	}
	return ""
}

func (m *QuerySpotOrdersRequest) GetTraderAddress() string {
	if m != nil {
		return m.TraderAddress
	}
	return ""
}

func (m *QuerySpotOrdersRequest) GetFeeRecipientAddress() string {
	if m != nil {
		return m.FeeRecipientAddress
	}
	return ""
}

type QuerySpotOrdersResponse struct {
	// An array of matched orders.
	Records []*Order `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (m *QuerySpotOrdersResponse) Reset()         { *m = QuerySpotOrdersResponse{} }
func (m *QuerySpotOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpotOrdersResponse) ProtoMessage()    {}
func (*QuerySpotOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{19}
}
func (m *QuerySpotOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotOrdersResponse.Merge(m, src)
}
func (m *QuerySpotOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotOrdersResponse proto.InternalMessageInfo

func (m *QuerySpotOrdersResponse) GetRecords() []*Order {
	if m != nil {
		return m.Records
	}
	return nil
}

type QueryFillRequestsRequest struct {
	// EIP712 hash of order (see LibOrder.getTypedDataHash)
	OrderHash string `protobuf:"bytes,1,opt,name=order_hash,json=orderHash,proto3" json:"order_hash,omitempty"`
}

func (m *QueryFillRequestsRequest) Reset()         { *m = QueryFillRequestsRequest{} }
func (m *QueryFillRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFillRequestsRequest) ProtoMessage()    {}
func (*QueryFillRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{20}
}
func (m *QueryFillRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFillRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFillRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFillRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFillRequestsRequest.Merge(m, src)
}
func (m *QueryFillRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFillRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFillRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFillRequestsRequest proto.InternalMessageInfo

func (m *QueryFillRequestsRequest) GetOrderHash() string {
	if m != nil {
		return m.OrderHash
	}
	return ""
}

type OrderFillRequest struct {
	TxHash               string   `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	OrderHash            string   `protobuf:"bytes,2,opt,name=order_hash,json=orderHash,proto3" json:"order_hash,omitempty"`
	ApprovalSignatures   []string `protobuf:"bytes,3,rep,name=approval_signatures,json=approvalSignatures,proto3" json:"approval_signatures,omitempty"`
	ExpiryAt             int64    `protobuf:"zigzag64,4,opt,name=expiry_at,json=expiryAt,proto3" json:"expiry_at,omitempty"`
	TakerAssetFillAmount string   `protobuf:"bytes,5,opt,name=taker_asset_fill_amount,json=takerAssetFillAmount,proto3" json:"taker_asset_fill_amount,omitempty"`
}

func (m *OrderFillRequest) Reset()         { *m = OrderFillRequest{} }
func (m *OrderFillRequest) String() string { return proto.CompactTextString(m) }
func (*OrderFillRequest) ProtoMessage()    {}
func (*OrderFillRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{21}
}
func (m *OrderFillRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderFillRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderFillRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderFillRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderFillRequest.Merge(m, src)
}
func (m *OrderFillRequest) XXX_Size() int {
	return m.Size()
}
func (m *OrderFillRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderFillRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrderFillRequest proto.InternalMessageInfo

func (m *OrderFillRequest) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *OrderFillRequest) GetOrderHash() string {
	if m != nil {
		return m.OrderHash
	}
	return ""
}

func (m *OrderFillRequest) GetApprovalSignatures() []string {
	if m != nil {
		return m.ApprovalSignatures
	}
	return nil
}

func (m *OrderFillRequest) GetExpiryAt() int64 {
	if m != nil {
		return m.ExpiryAt
	}
	return 0
}

func (m *OrderFillRequest) GetTakerAssetFillAmount() string {
	if m != nil {
		return m.TakerAssetFillAmount
	}
	return ""
}

type OrderSoftCancelRequest struct {
	TxHash             string   `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	OrderHash          string   `protobuf:"bytes,2,opt,name=order_hash,json=orderHash,proto3" json:"order_hash,omitempty"`
	ApprovalSignatures []string `protobuf:"bytes,3,rep,name=approval_signatures,json=approvalSignatures,proto3" json:"approval_signatures,omitempty"`
}

func (m *OrderSoftCancelRequest) Reset()         { *m = OrderSoftCancelRequest{} }
func (m *OrderSoftCancelRequest) String() string { return proto.CompactTextString(m) }
func (*OrderSoftCancelRequest) ProtoMessage()    {}
func (*OrderSoftCancelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{22}
}
func (m *OrderSoftCancelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderSoftCancelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderSoftCancelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderSoftCancelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderSoftCancelRequest.Merge(m, src)
}
func (m *OrderSoftCancelRequest) XXX_Size() int {
	return m.Size()
}
func (m *OrderSoftCancelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderSoftCancelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrderSoftCancelRequest proto.InternalMessageInfo

func (m *OrderSoftCancelRequest) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *OrderSoftCancelRequest) GetOrderHash() string {
	if m != nil {
		return m.OrderHash
	}
	return ""
}

func (m *OrderSoftCancelRequest) GetApprovalSignatures() []string {
	if m != nil {
		return m.ApprovalSignatures
	}
	return nil
}

type QueryFillRequestsResponse struct {
	// Information about the signatures to fill the order.
	FillRequests []*OrderFillRequest `protobuf:"bytes,1,rep,name=fill_requests,json=fillRequests,proto3" json:"fill_requests,omitempty"`
}

func (m *QueryFillRequestsResponse) Reset()         { *m = QueryFillRequestsResponse{} }
func (m *QueryFillRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFillRequestsResponse) ProtoMessage()    {}
func (*QueryFillRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{23}
}
func (m *QueryFillRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFillRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFillRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFillRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFillRequestsResponse.Merge(m, src)
}
func (m *QueryFillRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFillRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFillRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFillRequestsResponse proto.InternalMessageInfo

func (m *QueryFillRequestsResponse) GetFillRequests() []*OrderFillRequest {
	if m != nil {
		return m.FillRequests
	}
	return nil
}

type QueryOutstandingFillRequestsRequest struct {
	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *QueryOutstandingFillRequestsRequest) Reset()         { *m = QueryOutstandingFillRequestsRequest{} }
func (m *QueryOutstandingFillRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOutstandingFillRequestsRequest) ProtoMessage()    {}
func (*QueryOutstandingFillRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{24}
}
func (m *QueryOutstandingFillRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutstandingFillRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutstandingFillRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutstandingFillRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutstandingFillRequestsRequest.Merge(m, src)
}
func (m *QueryOutstandingFillRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutstandingFillRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutstandingFillRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutstandingFillRequestsRequest proto.InternalMessageInfo

func (m *QueryOutstandingFillRequestsRequest) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

type QueryOutstandingFillRequestsResponse struct {
	// Information about the signatures to fill the order.
	FillRequests []*OrderFillRequest `protobuf:"bytes,1,rep,name=fill_requests,json=fillRequests,proto3" json:"fill_requests,omitempty"`
}

func (m *QueryOutstandingFillRequestsResponse) Reset()         { *m = QueryOutstandingFillRequestsResponse{} }
func (m *QueryOutstandingFillRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOutstandingFillRequestsResponse) ProtoMessage()    {}
func (*QueryOutstandingFillRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{25}
}
func (m *QueryOutstandingFillRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutstandingFillRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutstandingFillRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutstandingFillRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutstandingFillRequestsResponse.Merge(m, src)
}
func (m *QueryOutstandingFillRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutstandingFillRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutstandingFillRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutstandingFillRequestsResponse proto.InternalMessageInfo

func (m *QueryOutstandingFillRequestsResponse) GetFillRequests() []*OrderFillRequest {
	if m != nil {
		return m.FillRequests
	}
	return nil
}

type QueryTradePairRequest struct {
	// Specify name of the trade pair.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Most effective way is to specify hash of the trade pair.
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerAsset.
	MakerAssetData string `protobuf:"bytes,3,opt,name=maker_asset_data,json=makerAssetData,proto3" json:"maker_asset_data,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerAsset.
	TakerAssetData string `protobuf:"bytes,4,opt,name=taker_asset_data,json=takerAssetData,proto3" json:"taker_asset_data,omitempty"`
}

func (m *QueryTradePairRequest) Reset()         { *m = QueryTradePairRequest{} }
func (m *QueryTradePairRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTradePairRequest) ProtoMessage()    {}
func (*QueryTradePairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{26}
}
func (m *QueryTradePairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTradePairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTradePairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTradePairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTradePairRequest.Merge(m, src)
}
func (m *QueryTradePairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTradePairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTradePairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTradePairRequest proto.InternalMessageInfo

func (m *QueryTradePairRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryTradePairRequest) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *QueryTradePairRequest) GetMakerAssetData() string {
	if m != nil {
		return m.MakerAssetData
	}
	return ""
}

func (m *QueryTradePairRequest) GetTakerAssetData() string {
	if m != nil {
		return m.TakerAssetData
	}
	return ""
}

type QueryTradePairResponse struct {
	// A name of the pair in format AAA/BBB, where AAA - maker's asset, BBB -
	// taker's asset.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring makerAsset.
	MakerAssetData string `protobuf:"bytes,2,opt,name=maker_asset_data,json=makerAssetData,proto3" json:"maker_asset_data,omitempty"`
	// ABIv2 encoded data that can be decoded by a specified proxy contract when
	// transferring takerAsset.
	TakerAssetData string `protobuf:"bytes,3,opt,name=taker_asset_data,json=takerAssetData,proto3" json:"taker_asset_data,omitempty"`
	// Hash of both asset data, to identify the trading pair in store.
	Hash string `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	// If false, then the pair is suspended and trades cannot be made.
	Enabled bool `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *QueryTradePairResponse) Reset()         { *m = QueryTradePairResponse{} }
func (m *QueryTradePairResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTradePairResponse) ProtoMessage()    {}
func (*QueryTradePairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{27}
}
func (m *QueryTradePairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTradePairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTradePairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTradePairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTradePairResponse.Merge(m, src)
}
func (m *QueryTradePairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTradePairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTradePairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTradePairResponse proto.InternalMessageInfo

func (m *QueryTradePairResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryTradePairResponse) GetMakerAssetData() string {
	if m != nil {
		return m.MakerAssetData
	}
	return ""
}

func (m *QueryTradePairResponse) GetTakerAssetData() string {
	if m != nil {
		return m.TakerAssetData
	}
	return ""
}

func (m *QueryTradePairResponse) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *QueryTradePairResponse) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type QueryDerivativeMarketRequest struct {
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Ticker   string `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
}

func (m *QueryDerivativeMarketRequest) Reset()         { *m = QueryDerivativeMarketRequest{} }
func (m *QueryDerivativeMarketRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeMarketRequest) ProtoMessage()    {}
func (*QueryDerivativeMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{28}
}
func (m *QueryDerivativeMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeMarketRequest.Merge(m, src)
}
func (m *QueryDerivativeMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeMarketRequest proto.InternalMessageInfo

func (m *QueryDerivativeMarketRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *QueryDerivativeMarketRequest) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

type QueryDerivativeMarketResponse struct {
	Market *DerivativeMarket `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (m *QueryDerivativeMarketResponse) Reset()         { *m = QueryDerivativeMarketResponse{} }
func (m *QueryDerivativeMarketResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeMarketResponse) ProtoMessage()    {}
func (*QueryDerivativeMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{29}
}
func (m *QueryDerivativeMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeMarketResponse.Merge(m, src)
}
func (m *QueryDerivativeMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeMarketResponse proto.InternalMessageInfo

func (m *QueryDerivativeMarketResponse) GetMarket() *DerivativeMarket {
	if m != nil {
		return m.Market
	}
	return nil
}

type QueryTradePairsRequest struct {
}

func (m *QueryTradePairsRequest) Reset()         { *m = QueryTradePairsRequest{} }
func (m *QueryTradePairsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTradePairsRequest) ProtoMessage()    {}
func (*QueryTradePairsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{30}
}
func (m *QueryTradePairsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTradePairsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTradePairsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTradePairsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTradePairsRequest.Merge(m, src)
}
func (m *QueryTradePairsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTradePairsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTradePairsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTradePairsRequest proto.InternalMessageInfo

type QueryTradePairsResponse struct {
	// Array of found trade pairs
	Records []*TradePair `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (m *QueryTradePairsResponse) Reset()         { *m = QueryTradePairsResponse{} }
func (m *QueryTradePairsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTradePairsResponse) ProtoMessage()    {}
func (*QueryTradePairsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{31}
}
func (m *QueryTradePairsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTradePairsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTradePairsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTradePairsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTradePairsResponse.Merge(m, src)
}
func (m *QueryTradePairsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTradePairsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTradePairsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTradePairsResponse proto.InternalMessageInfo

func (m *QueryTradePairsResponse) GetRecords() []*TradePair {
	if m != nil {
		return m.Records
	}
	return nil
}

type QueryDerivativeOrdersResponse struct {
	// An array of matched orders.
	Records []*Order `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (m *QueryDerivativeOrdersResponse) Reset()         { *m = QueryDerivativeOrdersResponse{} }
func (m *QueryDerivativeOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeOrdersResponse) ProtoMessage()    {}
func (*QueryDerivativeOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_216ed8f650e1de55, []int{32}
}
func (m *QueryDerivativeOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeOrdersResponse.Merge(m, src)
}
func (m *QueryDerivativeOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeOrdersResponse proto.InternalMessageInfo

func (m *QueryDerivativeOrdersResponse) GetRecords() []*Order {
	if m != nil {
		return m.Records
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryDerivativeMarketsRequest)(nil), "ethermint.orders.v1beta1.QueryDerivativeMarketsRequest")
	proto.RegisterType((*QueryDerivativeMarketsResponse)(nil), "ethermint.orders.v1beta1.QueryDerivativeMarketsResponse")
	proto.RegisterType((*QueryContractSetRequest)(nil), "ethermint.orders.v1beta1.QueryContractSetRequest")
	proto.RegisterType((*QueryContractSetResponse)(nil), "ethermint.orders.v1beta1.QueryContractSetResponse")
	proto.RegisterType((*QueryEvmSyncStatusRequest)(nil), "ethermint.orders.v1beta1.QueryEvmSyncStatusRequest")
	proto.RegisterType((*QueryEvmSyncStatusResponse)(nil), "ethermint.orders.v1beta1.QueryEvmSyncStatusResponse")
	proto.RegisterType((*QuerySoftCancelledOrdersRequest)(nil), "ethermint.orders.v1beta1.QuerySoftCancelledOrdersRequest")
	proto.RegisterType((*QuerySoftCancelledOrdersResponse)(nil), "ethermint.orders.v1beta1.QuerySoftCancelledOrdersResponse")
	proto.RegisterType((*QueryOrderRequest)(nil), "ethermint.orders.v1beta1.QueryOrderRequest")
	proto.RegisterType((*QueryOrderResponse)(nil), "ethermint.orders.v1beta1.QueryOrderResponse")
	proto.RegisterType((*QueryActiveOrderRequest)(nil), "ethermint.orders.v1beta1.QueryActiveOrderRequest")
	proto.RegisterType((*QueryActiveOrderResponse)(nil), "ethermint.orders.v1beta1.QueryActiveOrderResponse")
	proto.RegisterType((*QueryZeroExTransactionRequest)(nil), "ethermint.orders.v1beta1.QueryZeroExTransactionRequest")
	proto.RegisterType((*QueryZeroExTransactionResponse)(nil), "ethermint.orders.v1beta1.QueryZeroExTransactionResponse")
	proto.RegisterType((*QueryArchiveOrderRequest)(nil), "ethermint.orders.v1beta1.QueryArchiveOrderRequest")
	proto.RegisterType((*QueryArchiveOrderResponse)(nil), "ethermint.orders.v1beta1.QueryArchiveOrderResponse")
	proto.RegisterType((*OrderFilters)(nil), "ethermint.orders.v1beta1.OrderFilters")
	proto.RegisterType((*QueryOrdersRequest)(nil), "ethermint.orders.v1beta1.QueryOrdersRequest")
	proto.RegisterType((*QuerySpotOrdersRequest)(nil), "ethermint.orders.v1beta1.QuerySpotOrdersRequest")
	proto.RegisterType((*QuerySpotOrdersResponse)(nil), "ethermint.orders.v1beta1.QuerySpotOrdersResponse")
	proto.RegisterType((*QueryFillRequestsRequest)(nil), "ethermint.orders.v1beta1.QueryFillRequestsRequest")
	proto.RegisterType((*OrderFillRequest)(nil), "ethermint.orders.v1beta1.OrderFillRequest")
	proto.RegisterType((*OrderSoftCancelRequest)(nil), "ethermint.orders.v1beta1.OrderSoftCancelRequest")
	proto.RegisterType((*QueryFillRequestsResponse)(nil), "ethermint.orders.v1beta1.QueryFillRequestsResponse")
	proto.RegisterType((*QueryOutstandingFillRequestsRequest)(nil), "ethermint.orders.v1beta1.QueryOutstandingFillRequestsRequest")
	proto.RegisterType((*QueryOutstandingFillRequestsResponse)(nil), "ethermint.orders.v1beta1.QueryOutstandingFillRequestsResponse")
	proto.RegisterType((*QueryTradePairRequest)(nil), "ethermint.orders.v1beta1.QueryTradePairRequest")
	proto.RegisterType((*QueryTradePairResponse)(nil), "ethermint.orders.v1beta1.QueryTradePairResponse")
	proto.RegisterType((*QueryDerivativeMarketRequest)(nil), "ethermint.orders.v1beta1.QueryDerivativeMarketRequest")
	proto.RegisterType((*QueryDerivativeMarketResponse)(nil), "ethermint.orders.v1beta1.QueryDerivativeMarketResponse")
	proto.RegisterType((*QueryTradePairsRequest)(nil), "ethermint.orders.v1beta1.QueryTradePairsRequest")
	proto.RegisterType((*QueryTradePairsResponse)(nil), "ethermint.orders.v1beta1.QueryTradePairsResponse")
	proto.RegisterType((*QueryDerivativeOrdersResponse)(nil), "ethermint.orders.v1beta1.QueryDerivativeOrdersResponse")
}

func init() {
	proto.RegisterFile("ethermint/orders/v1beta1/query.proto", fileDescriptor_216ed8f650e1de55)
}

var fileDescriptor_216ed8f650e1de55 = []byte{
	// 1864 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0x4f, 0x6f, 0x1b, 0xc7,
	0x15, 0xf7, 0x4a, 0x32, 0x25, 0x3e, 0x4a, 0xb2, 0x34, 0x92, 0x65, 0x9a, 0x49, 0x28, 0x79, 0x65,
	0x49, 0xb4, 0xa3, 0x90, 0xb6, 0x1c, 0xb7, 0x51, 0x81, 0x04, 0x95, 0x22, 0x05, 0x31, 0xda, 0x20,
	0xce, 0x4a, 0x28, 0x0a, 0x5f, 0x16, 0xa3, 0xdd, 0x21, 0xb5, 0x30, 0xb9, 0xcb, 0xec, 0x0c, 0x55,
	0xb1, 0xb7, 0xf6, 0x13, 0x04, 0xc8, 0x17, 0xc8, 0xa1, 0x87, 0x1e, 0x82, 0xa2, 0x68, 0x81, 0xdc,
	0x7b, 0xcb, 0xad, 0x06, 0x7a, 0xf1, 0xb1, 0xb0, 0x7b, 0xee, 0x67, 0x28, 0x76, 0xfe, 0xec, 0x2e,
	0x97, 0xbb, 0xda, 0xa5, 0xdd, 0xf6, 0x46, 0xce, 0xfc, 0xde, 0xbc, 0xdf, 0xbc, 0x99, 0xf7, 0x7b,
	0x8f, 0x43, 0xb8, 0x4b, 0xd8, 0x39, 0xf1, 0x7b, 0x8e, 0xcb, 0x5a, 0x9e, 0x6f, 0x13, 0x9f, 0xb6,
	0x2e, 0x1e, 0x9e, 0x11, 0x86, 0x1f, 0xb6, 0xbe, 0x1e, 0x10, 0x7f, 0xd8, 0xec, 0xfb, 0x1e, 0xf3,
	0x50, 0x35, 0x44, 0x35, 0x05, 0xaa, 0x29, 0x51, 0xb5, 0xd5, 0x8e, 0xd7, 0xf1, 0x38, 0xa8, 0x15,
	0x7c, 0x12, 0xf8, 0xda, 0xbb, 0x1d, 0xcf, 0xeb, 0x74, 0x49, 0x0b, 0xf7, 0x9d, 0x16, 0x76, 0x5d,
	0x8f, 0x61, 0xe6, 0x78, 0x2e, 0x95, 0xb3, 0xdb, 0x99, 0x3e, 0x3b, 0xc4, 0x25, 0xd4, 0x51, 0xb8,
	0xad, 0x4c, 0x9c, 0x24, 0xc1, 0x61, 0xfa, 0x3a, 0xbc, 0xf7, 0x55, 0xc0, 0xf5, 0x88, 0xf8, 0xce,
	0x05, 0x66, 0xce, 0x05, 0xf9, 0x02, 0xfb, 0xcf, 0x09, 0xa3, 0x06, 0xf9, 0x7a, 0x40, 0x28, 0xd3,
	0xdb, 0x50, 0xcf, 0x02, 0xd0, 0xbe, 0xe7, 0x52, 0x82, 0x8e, 0x60, 0xb6, 0x27, 0x86, 0xaa, 0xda,
	0xc6, 0x74, 0xa3, 0xb2, 0x77, 0xbf, 0x99, 0xb5, 0xe3, 0x66, 0x72, 0x15, 0x43, 0x99, 0xea, 0xb7,
	0xe1, 0x16, 0xf7, 0xf3, 0xa9, 0xe7, 0x32, 0x1f, 0x5b, 0xec, 0x84, 0x30, 0x45, 0xc1, 0x86, 0xea,
	0xf8, 0x94, 0x74, 0xfe, 0x39, 0xcc, 0x5b, 0x72, 0xd8, 0xa4, 0x84, 0x55, 0xb5, 0x0d, 0xad, 0x51,
	0xd9, 0xdb, 0xca, 0x66, 0x10, 0x5f, 0xa4, 0x62, 0x45, 0x5f, 0xf4, 0x77, 0xe0, 0x36, 0xf7, 0x72,
	0x7c, 0xd1, 0x3b, 0x19, 0xba, 0xd6, 0x09, 0xc3, 0x6c, 0x10, 0x8b, 0x42, 0x2d, 0x6d, 0x32, 0x24,
	0x51, 0xa1, 0x43, 0xd7, 0x32, 0x29, 0x1f, 0x96, 0x1c, 0x76, 0xb2, 0x39, 0x8c, 0xae, 0x02, 0x34,
	0xfc, 0xac, 0x9b, 0xb0, 0xce, 0xfd, 0x9c, 0x78, 0x6d, 0xf6, 0x29, 0x76, 0x2d, 0xd2, 0xed, 0x12,
	0xfb, 0x4b, 0x6e, 0x2d, 0xa9, 0xa0, 0x3b, 0x30, 0xcf, 0x97, 0x33, 0xcf, 0x31, 0x3d, 0x27, 0x22,
	0xe6, 0x65, 0xa3, 0xc2, 0xc7, 0x3e, 0xe7, 0x43, 0xe8, 0x36, 0xcc, 0x59, 0xe7, 0xd8, 0x71, 0x4d,
	0xc7, 0xae, 0x4e, 0x6d, 0x68, 0x0d, 0x64, 0xcc, 0xf2, 0xef, 0x4f, 0x6c, 0xfd, 0x18, 0x36, 0xb2,
	0x1d, 0xc8, 0xed, 0xe4, 0x7b, 0xd0, 0xf7, 0x60, 0x99, 0x2f, 0xc3, 0x2d, 0x15, 0xb3, 0xf7, 0x00,
	0x22, 0x3b, 0x1e, 0x85, 0xb2, 0x51, 0x0e, 0xad, 0xf4, 0x5f, 0x00, 0x8a, 0xdb, 0x48, 0x67, 0x8f,
	0xe1, 0x3a, 0x87, 0xc8, 0xa8, 0xad, 0x67, 0x47, 0x4d, 0xd8, 0x09, 0xb4, 0xfe, 0x91, 0xbc, 0x2e,
	0x07, 0x56, 0x70, 0x99, 0x26, 0xa1, 0xf1, 0x95, 0xbc, 0x4d, 0x23, 0x96, 0x6f, 0x4b, 0x46, 0x24,
	0xd1, 0x33, 0xe2, 0x7b, 0xc7, 0x97, 0xa7, 0x3e, 0x76, 0x29, 0xb6, 0x82, 0xa4, 0x55, 0x94, 0x6e,
	0xc1, 0x2c, 0xbb, 0x8c, 0xf3, 0x29, 0xb1, 0x4b, 0x4e, 0xe6, 0xdf, 0x9a, 0x4c, 0xaf, 0x14, 0x53,
	0xc9, 0x49, 0xd8, 0xb2, 0x61, 0x9f, 0x70, 0x5b, 0x14, 0xd8, 0x9e, 0x0e, 0xfb, 0x04, 0x7d, 0x09,
	0x0b, 0x6d, 0xa7, 0xdb, 0x35, 0x7d, 0xe1, 0x84, 0x56, 0xa7, 0xf2, 0xb2, 0x8f, 0x93, 0xfe, 0xcc,
	0xe9, 0x76, 0x25, 0x2f, 0x63, 0xbe, 0x1d, 0x7d, 0xa1, 0xe8, 0x0c, 0x56, 0xa9, 0xd7, 0x66, 0xa6,
	0xc5, 0xef, 0x45, 0xb4, 0xee, 0x34, 0x5f, 0xf7, 0x41, 0xce, 0xba, 0xd1, 0x8d, 0x52, 0xab, 0x23,
	0x9a, 0x1c, 0xa2, 0xfa, 0xbe, 0x8a, 0xbe, 0x6f, 0x9d, 0x4f, 0x78, 0x70, 0x86, 0x4c, 0xd0, 0x51,
	0xd3, 0xb7, 0x3b, 0xb9, 0xef, 0x4b, 0x30, 0xaf, 0xa2, 0xc2, 0x88, 0x4f, 0xd1, 0x03, 0x58, 0x0d,
	0xf5, 0xa4, 0xef, 0x3b, 0x16, 0x31, 0xcf, 0xbc, 0x81, 0x6b, 0x4b, 0x36, 0x48, 0xcd, 0x3d, 0x0d,
	0xa6, 0x0e, 0x83, 0x19, 0xf4, 0x0e, 0x94, 0x85, 0x86, 0xa9, 0x6c, 0x2b, 0x1b, 0x73, 0x62, 0xe0,
	0x89, 0x1d, 0x1c, 0x9e, 0x43, 0xcd, 0xae, 0xe7, 0x76, 0xaa, 0xd3, 0x1b, 0x5a, 0x63, 0xce, 0x28,
	0x39, 0xf4, 0x97, 0x9e, 0xdb, 0x41, 0xeb, 0x50, 0x71, 0x3d, 0x66, 0x92, 0xcb, 0xbe, 0xe3, 0x13,
	0xbb, 0x3a, 0xc3, 0x27, 0xc1, 0xf5, 0xd8, 0xb1, 0x18, 0x41, 0x4d, 0x58, 0xe9, 0xe1, 0xe7, 0xc4,
	0x37, 0x31, 0xa5, 0x84, 0x99, 0xd8, 0xb6, 0x7d, 0x42, 0x69, 0xf5, 0x3a, 0x77, 0xb0, 0xcc, 0xa7,
	0x0e, 0x82, 0x99, 0x03, 0x31, 0x11, 0xe0, 0x59, 0x0a, 0xbe, 0x24, 0xf0, 0x6c, 0x0c, 0x7f, 0x0f,
	0x96, 0xc8, 0xa5, 0x75, 0x8e, 0xdd, 0x0e, 0x09, 0xc1, 0xb3, 0x1c, 0x7c, 0x43, 0x8d, 0x2b, 0xe8,
	0x16, 0x2c, 0x52, 0xe2, 0x06, 0x07, 0xa3, 0x80, 0x73, 0x1c, 0xb8, 0x20, 0x46, 0x15, 0xac, 0x01,
	0x4b, 0x71, 0xc6, 0x36, 0x66, 0xb8, 0x5a, 0xe6, 0xc0, 0xc5, 0x88, 0xee, 0x11, 0x66, 0x38, 0x40,
	0xb2, 0x24, 0x12, 0x04, 0x92, 0x8d, 0x22, 0x77, 0x01, 0x8d, 0x44, 0xa1, 0xe7, 0x0d, 0x5c, 0x56,
	0xad, 0x70, 0xec, 0x52, 0x2c, 0x08, 0x7c, 0x3c, 0x40, 0xb3, 0x71, 0xf4, 0xbc, 0x40, 0xb3, 0x24,
	0x7a, 0x13, 0x16, 0xe4, 0xda, 0x72, 0x57, 0x0b, 0x1c, 0x38, 0x2f, 0x96, 0x95, 0x9b, 0xba, 0x0f,
	0xcb, 0xc1, 0x39, 0x8d, 0x02, 0x17, 0x45, 0x9c, 0x5c, 0x8f, 0x7d, 0x11, 0xc7, 0x6e, 0xc2, 0x02,
	0x1b, 0xc1, 0xdd, 0x10, 0x0b, 0xb2, 0x38, 0x68, 0x0b, 0x16, 0x99, 0x8f, 0xe3, 0xc1, 0x5c, 0x12,
	0xc1, 0x14, 0xa3, 0x0a, 0xb6, 0x07, 0x37, 0xdb, 0x84, 0x98, 0x3e, 0xb1, 0x9c, 0xbe, 0x43, 0xdc,
	0xe8, 0x40, 0x97, 0x39, 0x7a, 0xa5, 0x4d, 0x88, 0xa1, 0xe6, 0x94, 0x4d, 0x0b, 0x56, 0x05, 0xcf,
	0xc0, 0x32, 0x16, 0x5a, 0x14, 0xbb, 0x33, 0x9f, 0x11, 0x12, 0x45, 0xb7, 0x05, 0xab, 0x2c, 0xcd,
	0x60, 0x25, 0x76, 0x69, 0xe2, 0x06, 0xfa, 0x0f, 0x5a, 0x5c, 0xc3, 0xc3, 0x92, 0xf4, 0x73, 0x98,
	0x6d, 0x8b, 0xfc, 0x91, 0xe9, 0xb7, 0x9d, 0xaf, 0x41, 0x01, 0xda, 0x50, 0x66, 0x68, 0x0d, 0x4a,
	0xb2, 0x78, 0x8a, 0x0c, 0x92, 0xdf, 0x50, 0x1d, 0xc0, 0xf2, 0xba, 0x5d, 0xc2, 0x25, 0x91, 0xa7,
	0x50, 0xd9, 0x88, 0x8d, 0xa0, 0x6d, 0xb8, 0xc1, 0xe3, 0x66, 0xf6, 0xb1, 0x23, 0x75, 0x63, 0x26,
	0x16, 0xce, 0xa7, 0xd8, 0x11, 0xda, 0xf1, 0xd7, 0x12, 0xac, 0x89, 0xba, 0xd7, 0xf7, 0xd8, 0x28,
	0xf9, 0xc8, 0x75, 0xe5, 0x0a, 0xd7, 0xf3, 0x45, 0x5c, 0x2f, 0xa4, 0xb8, 0x46, 0x75, 0xa8, 0x50,
	0xcf, 0x67, 0xe6, 0xd9, 0xd0, 0xbc, 0xb0, 0xdb, 0xfc, 0xee, 0x2c, 0x1b, 0xe5, 0x60, 0xe8, 0x70,
	0xf8, 0x2b, 0xbb, 0x1d, 0x9d, 0x9a, 0x38, 0x80, 0xbe, 0xef, 0x5d, 0x0e, 0x03, 0x29, 0xb9, 0x99,
	0xcc, 0xf4, 0xa7, 0xc1, 0xcc, 0x13, 0x3b, 0x3a, 0xb5, 0x84, 0xc1, 0x5a, 0x32, 0xd5, 0x95, 0x41,
	0x86, 0x94, 0xdc, 0x9a, 0x50, 0x4a, 0xaa, 0x93, 0x48, 0xc9, 0x7a, 0x51, 0x29, 0xd9, 0x28, 0x2a,
	0x25, 0x77, 0x0a, 0x4b, 0x89, 0x9e, 0x2a, 0x25, 0x59, 0xd9, 0xb1, 0x39, 0x69, 0x76, 0xdc, 0xcd,
	0xc8, 0x8e, 0x40, 0x2b, 0x54, 0x6a, 0x47, 0xe8, 0x2d, 0x11, 0x08, 0x99, 0xdd, 0x21, 0x76, 0x4c,
	0x7c, 0xb6, 0x53, 0xc4, 0x67, 0x4c, 0x50, 0x76, 0x0a, 0x09, 0x4a, 0x63, 0x22, 0x41, 0xb9, 0x97,
	0x29, 0x28, 0xfa, 0xa9, 0x6c, 0xb2, 0xe2, 0x49, 0x23, 0xeb, 0xed, 0x3e, 0xcc, 0xfa, 0xc4, 0xf2,
	0x7c, 0x5b, 0x35, 0xfd, 0xb9, 0x15, 0x57, 0xe1, 0xc3, 0x16, 0x20, 0xd6, 0x88, 0xd0, 0x82, 0x2d,
	0xc0, 0xdf, 0x35, 0x58, 0x4a, 0x36, 0x31, 0x99, 0xcd, 0x55, 0x62, 0xb1, 0xa9, 0xc4, 0x62, 0xa8,
	0x05, 0x2b, 0xb8, 0xdf, 0xf7, 0xbd, 0x0b, 0xdc, 0x35, 0xa9, 0xd3, 0x71, 0x31, 0x1b, 0xf8, 0x44,
	0x74, 0x3b, 0x65, 0x03, 0xa9, 0xa9, 0x93, 0x70, 0x26, 0xa8, 0xf4, 0xbc, 0x5e, 0x0f, 0x4d, 0xcc,
	0xb8, 0xcc, 0x20, 0x63, 0x4e, 0x0c, 0x1c, 0x30, 0xf4, 0x18, 0x6e, 0xc5, 0x2f, 0x22, 0xef, 0xcc,
	0x64, 0x01, 0x12, 0x35, 0x7b, 0x35, 0xba, 0x8f, 0x01, 0x7b, 0x51, 0x84, 0xf4, 0xdf, 0x69, 0xb0,
	0x96, 0xde, 0x3e, 0xfd, 0xdf, 0xf6, 0xa5, 0x77, 0x65, 0x63, 0x35, 0x7a, 0x20, 0xf2, 0xa0, 0xc7,
	0xba, 0x4c, 0xed, 0xed, 0xba, 0x4c, 0xfd, 0x13, 0xd8, 0x14, 0x25, 0x64, 0xc0, 0x28, 0xc3, 0xae,
	0xed, 0xb8, 0x9d, 0xb4, 0x9b, 0x90, 0xd9, 0x32, 0xff, 0x06, 0xee, 0x5e, 0x6d, 0xff, 0xbf, 0x22,
	0xfe, 0xad, 0x06, 0x37, 0xb9, 0xe7, 0x53, 0xa5, 0xef, 0x8a, 0x2b, 0x82, 0x19, 0x17, 0xf7, 0x88,
	0x24, 0xca, 0x3f, 0x07, 0x63, 0xb1, 0xe3, 0xe1, 0x9f, 0x53, 0x65, 0x6d, 0xba, 0xb0, 0xac, 0xcd,
	0xa4, 0xc9, 0x9a, 0xfe, 0x27, 0x4d, 0x56, 0xb6, 0x18, 0x2b, 0x19, 0x81, 0x34, 0x5a, 0x69, 0x14,
	0xa6, 0x0a, 0x53, 0x98, 0x4e, 0x55, 0x56, 0xb5, 0xd5, 0x99, 0xd8, 0x56, 0xab, 0x30, 0x4b, 0x5c,
	0x7c, 0xd6, 0x25, 0x36, 0xbf, 0xfe, 0x73, 0x86, 0xfa, 0xaa, 0x9f, 0xc0, 0xbb, 0xa9, 0x0f, 0x0a,
	0x2a, 0x98, 0x23, 0xfd, 0xb4, 0x96, 0xe8, 0xa7, 0xd7, 0xa0, 0xc4, 0x1c, 0xeb, 0x39, 0xf1, 0x55,
	0x9f, 0x20, 0xbe, 0xe9, 0x56, 0xc6, 0x33, 0x46, 0x18, 0x8b, 0x43, 0x28, 0x89, 0x45, 0x64, 0x87,
	0x32, 0xc9, 0x1b, 0x85, 0xb4, 0xd4, 0xab, 0xc9, 0x48, 0x87, 0xcf, 0x03, 0xbf, 0x96, 0x42, 0x19,
	0x9f, 0x91, 0x8e, 0x3f, 0x4e, 0x0a, 0xe5, 0x66, 0xb6, 0xe7, 0xe8, 0x08, 0x43, 0xb1, 0x7c, 0x36,
	0xb6, 0xb1, 0xff, 0x9a, 0x10, 0xef, 0xbd, 0x58, 0x81, 0xeb, 0x7c, 0x71, 0xf4, 0x8d, 0x06, 0x10,
	0xf5, 0x75, 0xe8, 0xfd, 0xec, 0x25, 0xc6, 0x7e, 0xf5, 0xd7, 0x76, 0x8b, 0x81, 0x05, 0x5d, 0x7d,
	0xe7, 0xf7, 0xff, 0xf8, 0xd7, 0xb7, 0x53, 0x77, 0xd0, 0x7a, 0xeb, 0xea, 0xf7, 0x29, 0xf4, 0x47,
	0x0d, 0x96, 0x92, 0xbf, 0xd3, 0xd1, 0xc3, 0x1c, 0x5f, 0xe3, 0xaf, 0x01, 0xb5, 0xbd, 0x49, 0x4c,
	0x24, 0xc9, 0x0f, 0x38, 0xc9, 0x1d, 0xb4, 0x95, 0x4d, 0x12, 0xc7, 0x58, 0x7d, 0xaf, 0xc9, 0xd7,
	0x90, 0xf8, 0x2f, 0x53, 0x94, 0xeb, 0x78, 0xfc, 0x17, 0x70, 0xed, 0xd1, 0x44, 0x36, 0x92, 0x6d,
	0x93, 0xb3, 0x6d, 0xa0, 0xed, 0x2b, 0xd8, 0xc6, 0x89, 0x7d, 0xa7, 0xc1, 0x8d, 0x44, 0x59, 0x47,
	0x85, 0x0e, 0x51, 0x5d, 0xf7, 0x5a, 0xde, 0x31, 0x8c, 0xf7, 0x0b, 0xfa, 0x2e, 0x27, 0xb9, 0x8d,
	0xee, 0x66, 0x93, 0xa4, 0x11, 0x9d, 0xef, 0x34, 0x58, 0x1c, 0x4d, 0x28, 0xd4, 0xca, 0xf1, 0x99,
	0x14, 0xe5, 0xda, 0x83, 0xe2, 0x06, 0x92, 0xe3, 0xfb, 0x9c, 0xe3, 0x16, 0xda, 0xcc, 0xe6, 0x18,
	0xb6, 0xf6, 0xe8, 0x0f, 0x2a, 0x8a, 0x51, 0xce, 0xa3, 0xc2, 0x2e, 0x0b, 0x47, 0x72, 0x5c, 0x50,
	0x8a, 0x44, 0x92, 0x45, 0x94, 0xfe, 0xa2, 0x8a, 0x56, 0x52, 0xd5, 0xd0, 0x4f, 0x72, 0x5c, 0x67,
	0xe8, 0x73, 0xed, 0xa7, 0x13, 0xdb, 0x49, 0xe2, 0x0d, 0x4e, 0x5c, 0x47, 0x1b, 0xd9, 0xc4, 0x85,
	0xd0, 0xa2, 0x1f, 0x54, 0x4d, 0x1b, 0x7b, 0x74, 0x46, 0x93, 0x7a, 0x0f, 0x23, 0xfd, 0xd1, 0xe4,
	0x86, 0x92, 0xf7, 0x3d, 0xce, 0x7b, 0x13, 0xdd, 0xc9, 0xe3, 0x9d, 0x1a, 0xed, 0x37, 0x4a, 0xb0,
	0xe2, 0xbb, 0x4c, 0xa4, 0xd9, 0x1e, 0xe7, 0xba, 0x8b, 0xee, 0x67, 0x73, 0xb5, 0x93, 0xd4, 0xfe,
	0xa6, 0xa2, 0x3d, 0xf6, 0x06, 0x99, 0x1b, 0xed, 0xac, 0x07, 0xcf, 0xdc, 0x68, 0x67, 0x3e, 0x77,
	0xea, 0x1f, 0xf2, 0x1d, 0x34, 0xd1, 0x6e, 0xf6, 0x0e, 0x7e, 0x4b, 0x7c, 0x8f, 0xc4, 0x8d, 0x29,
	0xfa, 0x51, 0x93, 0x3f, 0x2a, 0x52, 0xde, 0xb5, 0xd1, 0x7e, 0x9e, 0x5c, 0x65, 0x3e, 0xb6, 0xd7,
	0x7e, 0xf6, 0x26, 0xa6, 0x72, 0x27, 0x8f, 0xf9, 0x4e, 0x5a, 0xe8, 0x83, 0x2b, 0x24, 0x2f, 0x85,
	0xed, 0x4b, 0x4d, 0x36, 0x48, 0x19, 0x0d, 0x2e, 0xfa, 0x38, 0xef, 0x2a, 0x5d, 0xd9, 0x58, 0xd7,
	0x3e, 0x79, 0x53, 0x73, 0xb9, 0xad, 0x7d, 0xbe, 0xad, 0x47, 0xe8, 0xe1, 0x15, 0x15, 0x3c, 0x83,
	0x79, 0x58, 0x28, 0x47, 0x46, 0xf3, 0x0a, 0x65, 0xda, 0x26, 0x1e, 0x4d, 0x64, 0x53, 0xbc, 0x50,
	0x8e, 0xbc, 0x87, 0xff, 0x59, 0xbd, 0x76, 0x8d, 0xfc, 0x5f, 0x83, 0xf2, 0x7c, 0xa7, 0xfd, 0x81,
	0x54, 0xfb, 0x70, 0x32, 0x23, 0xc9, 0xb8, 0xc5, 0x19, 0xdf, 0x43, 0x3b, 0xd9, 0x8c, 0x49, 0xdc,
	0xf0, 0xf0, 0xe8, 0xc7, 0x57, 0x75, 0xed, 0xc5, 0xab, 0xba, 0xf6, 0xcf, 0x57, 0x75, 0xed, 0x9b,
	0xd7, 0xf5, 0x6b, 0x2f, 0x5e, 0xd7, 0xaf, 0xbd, 0x7c, 0x5d, 0xbf, 0xf6, 0xec, 0x7e, 0xc7, 0x61,
	0xe7, 0x83, 0xb3, 0xa6, 0xe5, 0xf5, 0x5a, 0x96, 0x47, 0x7b, 0x1e, 0x8d, 0xad, 0x79, 0xa9, 0x56,
	0x65, 0xc3, 0x3e, 0xa1, 0x67, 0x25, 0xfe, 0xdf, 0xe0, 0xa3, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x53, 0x55, 0xfd, 0xf7, 0xe0, 0x1c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Retrieves an active 0x order that is associated with the hash.
	QueryOrder(ctx context.Context, in *QueryOrderRequest, opts ...grpc.CallOption) (*QueryOrderResponse, error)
	// Retrieves an active 0x order that is associated with the hash.
	QueryActiveOrder(ctx context.Context, in *QueryActiveOrderRequest, opts ...grpc.CallOption) (*QueryActiveOrderResponse, error)
	// Retrieves an archive 0x order that is associated with the hash.
	QueryArchiveOrder(ctx context.Context, in *QueryArchiveOrderRequest, opts ...grpc.CallOption) (*QueryArchiveOrderResponse, error)
	// Retrieves a list of 0x orders matching the filtering rules.
	QuerySpotOrders(ctx context.Context, in *QueryOrdersRequest, opts ...grpc.CallOption) (*QuerySpotOrdersResponse, error)
	// Retrieves a trade pair by name or hash.
	QueryTradePair(ctx context.Context, in *QueryTradePairRequest, opts ...grpc.CallOption) (*QueryTradePairResponse, error)
	// Retrieves a list of trade pairs.
	QueryTradePairs(ctx context.Context, in *QueryTradePairsRequest, opts ...grpc.CallOption) (*QueryTradePairsResponse, error)
	// Retrieves a derivative market by its ID or ticker.
	QueryDerivativeMarket(ctx context.Context, in *QueryDerivativeMarketRequest, opts ...grpc.CallOption) (*QueryDerivativeMarketResponse, error)
	// Retrieves a list of derivative markets.
	QueryDerivativeMarkets(ctx context.Context, in *QueryDerivativeMarketsRequest, opts ...grpc.CallOption) (*QueryDerivativeMarketsResponse, error)
	// Retrieves a list of derivative orders matching the filtering rules.
	QueryDerivativeOrders(ctx context.Context, in *QueryOrdersRequest, opts ...grpc.CallOption) (*QueryDerivativeOrdersResponse, error)
	// Retrieves a list of derivative orders matching the filtering rules.
	QueryZeroExTransaction(ctx context.Context, in *QueryZeroExTransactionRequest, opts ...grpc.CallOption) (*QueryZeroExTransactionResponse, error)
	// Query whether a set of orders have been soft-cancelled. The response returns
	// the subset of orders that have been soft-cancelled.
	QuerySoftCancelledOrders(ctx context.Context, in *QuerySoftCancelledOrdersRequest, opts ...grpc.CallOption) (*QuerySoftCancelledOrdersResponse, error)
	// Retrieves a list of fill requests matching the filtering rules.
	QueryOutstandingFillRequests(ctx context.Context, in *QueryOutstandingFillRequestsRequest, opts ...grpc.CallOption) (*QueryOutstandingFillRequestsResponse, error)
	// Retrieves a list of fill requests matching the filtering rules.
	QueryFillRequests(ctx context.Context, in *QueryFillRequestsRequest, opts ...grpc.CallOption) (*QueryFillRequestsResponse, error)
	// Contains sync status of EVM state.
	QueryEvmSyncStatus(ctx context.Context, in *QueryEvmSyncStatusRequest, opts ...grpc.CallOption) (*QueryEvmSyncStatusResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryOrder(ctx context.Context, in *QueryOrderRequest, opts ...grpc.CallOption) (*QueryOrderResponse, error) {
	out := new(QueryOrderResponse)
	err := c.cc.Invoke(ctx, "/ethermint.orders.v1beta1.Query/QueryOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryActiveOrder(ctx context.Context, in *QueryActiveOrderRequest, opts ...grpc.CallOption) (*QueryActiveOrderResponse, error) {
	out := new(QueryActiveOrderResponse)
	err := c.cc.Invoke(ctx, "/ethermint.orders.v1beta1.Query/QueryActiveOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryArchiveOrder(ctx context.Context, in *QueryArchiveOrderRequest, opts ...grpc.CallOption) (*QueryArchiveOrderResponse, error) {
	out := new(QueryArchiveOrderResponse)
	err := c.cc.Invoke(ctx, "/ethermint.orders.v1beta1.Query/QueryArchiveOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySpotOrders(ctx context.Context, in *QueryOrdersRequest, opts ...grpc.CallOption) (*QuerySpotOrdersResponse, error) {
	out := new(QuerySpotOrdersResponse)
	err := c.cc.Invoke(ctx, "/ethermint.orders.v1beta1.Query/QuerySpotOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryTradePair(ctx context.Context, in *QueryTradePairRequest, opts ...grpc.CallOption) (*QueryTradePairResponse, error) {
	out := new(QueryTradePairResponse)
	err := c.cc.Invoke(ctx, "/ethermint.orders.v1beta1.Query/QueryTradePair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryTradePairs(ctx context.Context, in *QueryTradePairsRequest, opts ...grpc.CallOption) (*QueryTradePairsResponse, error) {
	out := new(QueryTradePairsResponse)
	err := c.cc.Invoke(ctx, "/ethermint.orders.v1beta1.Query/QueryTradePairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDerivativeMarket(ctx context.Context, in *QueryDerivativeMarketRequest, opts ...grpc.CallOption) (*QueryDerivativeMarketResponse, error) {
	out := new(QueryDerivativeMarketResponse)
	err := c.cc.Invoke(ctx, "/ethermint.orders.v1beta1.Query/QueryDerivativeMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDerivativeMarkets(ctx context.Context, in *QueryDerivativeMarketsRequest, opts ...grpc.CallOption) (*QueryDerivativeMarketsResponse, error) {
	out := new(QueryDerivativeMarketsResponse)
	err := c.cc.Invoke(ctx, "/ethermint.orders.v1beta1.Query/QueryDerivativeMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDerivativeOrders(ctx context.Context, in *QueryOrdersRequest, opts ...grpc.CallOption) (*QueryDerivativeOrdersResponse, error) {
	out := new(QueryDerivativeOrdersResponse)
	err := c.cc.Invoke(ctx, "/ethermint.orders.v1beta1.Query/QueryDerivativeOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryZeroExTransaction(ctx context.Context, in *QueryZeroExTransactionRequest, opts ...grpc.CallOption) (*QueryZeroExTransactionResponse, error) {
	out := new(QueryZeroExTransactionResponse)
	err := c.cc.Invoke(ctx, "/ethermint.orders.v1beta1.Query/QueryZeroExTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySoftCancelledOrders(ctx context.Context, in *QuerySoftCancelledOrdersRequest, opts ...grpc.CallOption) (*QuerySoftCancelledOrdersResponse, error) {
	out := new(QuerySoftCancelledOrdersResponse)
	err := c.cc.Invoke(ctx, "/ethermint.orders.v1beta1.Query/QuerySoftCancelledOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOutstandingFillRequests(ctx context.Context, in *QueryOutstandingFillRequestsRequest, opts ...grpc.CallOption) (*QueryOutstandingFillRequestsResponse, error) {
	out := new(QueryOutstandingFillRequestsResponse)
	err := c.cc.Invoke(ctx, "/ethermint.orders.v1beta1.Query/QueryOutstandingFillRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryFillRequests(ctx context.Context, in *QueryFillRequestsRequest, opts ...grpc.CallOption) (*QueryFillRequestsResponse, error) {
	out := new(QueryFillRequestsResponse)
	err := c.cc.Invoke(ctx, "/ethermint.orders.v1beta1.Query/QueryFillRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryEvmSyncStatus(ctx context.Context, in *QueryEvmSyncStatusRequest, opts ...grpc.CallOption) (*QueryEvmSyncStatusResponse, error) {
	out := new(QueryEvmSyncStatusResponse)
	err := c.cc.Invoke(ctx, "/ethermint.orders.v1beta1.Query/QueryEvmSyncStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Retrieves an active 0x order that is associated with the hash.
	QueryOrder(context.Context, *QueryOrderRequest) (*QueryOrderResponse, error)
	// Retrieves an active 0x order that is associated with the hash.
	QueryActiveOrder(context.Context, *QueryActiveOrderRequest) (*QueryActiveOrderResponse, error)
	// Retrieves an archive 0x order that is associated with the hash.
	QueryArchiveOrder(context.Context, *QueryArchiveOrderRequest) (*QueryArchiveOrderResponse, error)
	// Retrieves a list of 0x orders matching the filtering rules.
	QuerySpotOrders(context.Context, *QueryOrdersRequest) (*QuerySpotOrdersResponse, error)
	// Retrieves a trade pair by name or hash.
	QueryTradePair(context.Context, *QueryTradePairRequest) (*QueryTradePairResponse, error)
	// Retrieves a list of trade pairs.
	QueryTradePairs(context.Context, *QueryTradePairsRequest) (*QueryTradePairsResponse, error)
	// Retrieves a derivative market by its ID or ticker.
	QueryDerivativeMarket(context.Context, *QueryDerivativeMarketRequest) (*QueryDerivativeMarketResponse, error)
	// Retrieves a list of derivative markets.
	QueryDerivativeMarkets(context.Context, *QueryDerivativeMarketsRequest) (*QueryDerivativeMarketsResponse, error)
	// Retrieves a list of derivative orders matching the filtering rules.
	QueryDerivativeOrders(context.Context, *QueryOrdersRequest) (*QueryDerivativeOrdersResponse, error)
	// Retrieves a list of derivative orders matching the filtering rules.
	QueryZeroExTransaction(context.Context, *QueryZeroExTransactionRequest) (*QueryZeroExTransactionResponse, error)
	// Query whether a set of orders have been soft-cancelled. The response returns
	// the subset of orders that have been soft-cancelled.
	QuerySoftCancelledOrders(context.Context, *QuerySoftCancelledOrdersRequest) (*QuerySoftCancelledOrdersResponse, error)
	// Retrieves a list of fill requests matching the filtering rules.
	QueryOutstandingFillRequests(context.Context, *QueryOutstandingFillRequestsRequest) (*QueryOutstandingFillRequestsResponse, error)
	// Retrieves a list of fill requests matching the filtering rules.
	QueryFillRequests(context.Context, *QueryFillRequestsRequest) (*QueryFillRequestsResponse, error)
	// Contains sync status of EVM state.
	QueryEvmSyncStatus(context.Context, *QueryEvmSyncStatusRequest) (*QueryEvmSyncStatusResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryOrder(ctx context.Context, req *QueryOrderRequest) (*QueryOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrder not implemented")
}
func (*UnimplementedQueryServer) QueryActiveOrder(ctx context.Context, req *QueryActiveOrderRequest) (*QueryActiveOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryActiveOrder not implemented")
}
func (*UnimplementedQueryServer) QueryArchiveOrder(ctx context.Context, req *QueryArchiveOrderRequest) (*QueryArchiveOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryArchiveOrder not implemented")
}
func (*UnimplementedQueryServer) QuerySpotOrders(ctx context.Context, req *QueryOrdersRequest) (*QuerySpotOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySpotOrders not implemented")
}
func (*UnimplementedQueryServer) QueryTradePair(ctx context.Context, req *QueryTradePairRequest) (*QueryTradePairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTradePair not implemented")
}
func (*UnimplementedQueryServer) QueryTradePairs(ctx context.Context, req *QueryTradePairsRequest) (*QueryTradePairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTradePairs not implemented")
}
func (*UnimplementedQueryServer) QueryDerivativeMarket(ctx context.Context, req *QueryDerivativeMarketRequest) (*QueryDerivativeMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDerivativeMarket not implemented")
}
func (*UnimplementedQueryServer) QueryDerivativeMarkets(ctx context.Context, req *QueryDerivativeMarketsRequest) (*QueryDerivativeMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDerivativeMarkets not implemented")
}
func (*UnimplementedQueryServer) QueryDerivativeOrders(ctx context.Context, req *QueryOrdersRequest) (*QueryDerivativeOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDerivativeOrders not implemented")
}
func (*UnimplementedQueryServer) QueryZeroExTransaction(ctx context.Context, req *QueryZeroExTransactionRequest) (*QueryZeroExTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryZeroExTransaction not implemented")
}
func (*UnimplementedQueryServer) QuerySoftCancelledOrders(ctx context.Context, req *QuerySoftCancelledOrdersRequest) (*QuerySoftCancelledOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySoftCancelledOrders not implemented")
}
func (*UnimplementedQueryServer) QueryOutstandingFillRequests(ctx context.Context, req *QueryOutstandingFillRequestsRequest) (*QueryOutstandingFillRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOutstandingFillRequests not implemented")
}
func (*UnimplementedQueryServer) QueryFillRequests(ctx context.Context, req *QueryFillRequestsRequest) (*QueryFillRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFillRequests not implemented")
}
func (*UnimplementedQueryServer) QueryEvmSyncStatus(ctx context.Context, req *QueryEvmSyncStatusRequest) (*QueryEvmSyncStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryEvmSyncStatus not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.orders.v1beta1.Query/QueryOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOrder(ctx, req.(*QueryOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryActiveOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActiveOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryActiveOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.orders.v1beta1.Query/QueryActiveOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryActiveOrder(ctx, req.(*QueryActiveOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryArchiveOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryArchiveOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryArchiveOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.orders.v1beta1.Query/QueryArchiveOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryArchiveOrder(ctx, req.(*QueryArchiveOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySpotOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySpotOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.orders.v1beta1.Query/QuerySpotOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySpotOrders(ctx, req.(*QueryOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryTradePair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradePairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTradePair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.orders.v1beta1.Query/QueryTradePair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTradePair(ctx, req.(*QueryTradePairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryTradePairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradePairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTradePairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.orders.v1beta1.Query/QueryTradePairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTradePairs(ctx, req.(*QueryTradePairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDerivativeMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivativeMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDerivativeMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.orders.v1beta1.Query/QueryDerivativeMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDerivativeMarket(ctx, req.(*QueryDerivativeMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDerivativeMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivativeMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDerivativeMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.orders.v1beta1.Query/QueryDerivativeMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDerivativeMarkets(ctx, req.(*QueryDerivativeMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDerivativeOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDerivativeOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.orders.v1beta1.Query/QueryDerivativeOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDerivativeOrders(ctx, req.(*QueryOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryZeroExTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryZeroExTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryZeroExTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.orders.v1beta1.Query/QueryZeroExTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryZeroExTransaction(ctx, req.(*QueryZeroExTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySoftCancelledOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySoftCancelledOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySoftCancelledOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.orders.v1beta1.Query/QuerySoftCancelledOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySoftCancelledOrders(ctx, req.(*QuerySoftCancelledOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOutstandingFillRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutstandingFillRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOutstandingFillRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.orders.v1beta1.Query/QueryOutstandingFillRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOutstandingFillRequests(ctx, req.(*QueryOutstandingFillRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryFillRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFillRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryFillRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.orders.v1beta1.Query/QueryFillRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryFillRequests(ctx, req.(*QueryFillRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryEvmSyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEvmSyncStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryEvmSyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethermint.orders.v1beta1.Query/QueryEvmSyncStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryEvmSyncStatus(ctx, req.(*QueryEvmSyncStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ethermint.orders.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryOrder",
			Handler:    _Query_QueryOrder_Handler,
		},
		{
			MethodName: "QueryActiveOrder",
			Handler:    _Query_QueryActiveOrder_Handler,
		},
		{
			MethodName: "QueryArchiveOrder",
			Handler:    _Query_QueryArchiveOrder_Handler,
		},
		{
			MethodName: "QuerySpotOrders",
			Handler:    _Query_QuerySpotOrders_Handler,
		},
		{
			MethodName: "QueryTradePair",
			Handler:    _Query_QueryTradePair_Handler,
		},
		{
			MethodName: "QueryTradePairs",
			Handler:    _Query_QueryTradePairs_Handler,
		},
		{
			MethodName: "QueryDerivativeMarket",
			Handler:    _Query_QueryDerivativeMarket_Handler,
		},
		{
			MethodName: "QueryDerivativeMarkets",
			Handler:    _Query_QueryDerivativeMarkets_Handler,
		},
		{
			MethodName: "QueryDerivativeOrders",
			Handler:    _Query_QueryDerivativeOrders_Handler,
		},
		{
			MethodName: "QueryZeroExTransaction",
			Handler:    _Query_QueryZeroExTransaction_Handler,
		},
		{
			MethodName: "QuerySoftCancelledOrders",
			Handler:    _Query_QuerySoftCancelledOrders_Handler,
		},
		{
			MethodName: "QueryOutstandingFillRequests",
			Handler:    _Query_QueryOutstandingFillRequests_Handler,
		},
		{
			MethodName: "QueryFillRequests",
			Handler:    _Query_QueryFillRequests_Handler,
		},
		{
			MethodName: "QueryEvmSyncStatus",
			Handler:    _Query_QueryEvmSyncStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ethermint/orders/v1beta1/query.proto",
}

func (m *QueryDerivativeMarketsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeMarketsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeMarketsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeMarketsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeMarketsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeMarketsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Markets) > 0 {
		for iNdEx := len(m.Markets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Markets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryContractSetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryContractSetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryContractSetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryContractSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryContractSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryContractSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContractSet != nil {
		{
			size, err := m.ContractSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEvmSyncStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEvmSyncStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEvmSyncStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryEvmSyncStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEvmSyncStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEvmSyncStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SyncStatus != nil {
		{
			size, err := m.SyncStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySoftCancelledOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySoftCancelledOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySoftCancelledOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64((uint64(m.ChainId)<<1)^uint64((m.ChainId>>63))))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OrderHashes) > 0 {
		for iNdEx := len(m.OrderHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrderHashes[iNdEx])
			copy(dAtA[i:], m.OrderHashes[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderHashes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySoftCancelledOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySoftCancelledOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySoftCancelledOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderHashes) > 0 {
		for iNdEx := len(m.OrderHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrderHashes[iNdEx])
			copy(dAtA[i:], m.OrderHashes[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderHashes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderHash) > 0 {
		i -= len(m.OrderHash)
		copy(dAtA[i:], m.OrderHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderHash) > 0 {
		i -= len(m.OrderHash)
		copy(dAtA[i:], m.OrderHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryZeroExTransactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryZeroExTransactionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryZeroExTransactionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryZeroExTransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryZeroExTransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryZeroExTransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SoftCancelRequests) > 0 {
		for iNdEx := len(m.SoftCancelRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SoftCancelRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.FillRequests) > 0 {
		for iNdEx := len(m.FillRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FillRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TxType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64((uint64(m.TxType)<<1)^uint64((m.TxType>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryArchiveOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryArchiveOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryArchiveOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderHash) > 0 {
		i -= len(m.OrderHash)
		copy(dAtA[i:], m.OrderHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryArchiveOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryArchiveOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryArchiveOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OrderFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderFilters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderFilters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TakerFeeAssetData) > 0 {
		i -= len(m.TakerFeeAssetData)
		copy(dAtA[i:], m.TakerFeeAssetData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TakerFeeAssetData)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.MakerFeeAssetData) > 0 {
		i -= len(m.MakerFeeAssetData)
		copy(dAtA[i:], m.MakerFeeAssetData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MakerFeeAssetData)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.FeeRecipientAddress) > 0 {
		i -= len(m.FeeRecipientAddress)
		copy(dAtA[i:], m.FeeRecipientAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeeRecipientAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.TraderAddress) > 0 {
		i -= len(m.TraderAddress)
		copy(dAtA[i:], m.TraderAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TraderAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.TakerAddress) > 0 {
		i -= len(m.TakerAddress)
		copy(dAtA[i:], m.TakerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TakerAddress)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.NotMakerAddress) > 0 {
		i -= len(m.NotMakerAddress)
		copy(dAtA[i:], m.NotMakerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NotMakerAddress)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.MakerAddress) > 0 {
		i -= len(m.MakerAddress)
		copy(dAtA[i:], m.MakerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MakerAddress)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.TakerAssetAmount) > 0 {
		i -= len(m.TakerAssetAmount)
		copy(dAtA[i:], m.TakerAssetAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TakerAssetAmount)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.MakerAssetAmount) > 0 {
		i -= len(m.MakerAssetAmount)
		copy(dAtA[i:], m.MakerAssetAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MakerAssetAmount)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.TakerAssetData) > 0 {
		i -= len(m.TakerAssetData)
		copy(dAtA[i:], m.TakerAssetData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TakerAssetData)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.MakerAssetData) > 0 {
		i -= len(m.MakerAssetData)
		copy(dAtA[i:], m.MakerAssetData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MakerAssetData)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ExchangeAddress) > 0 {
		i -= len(m.ExchangeAddress)
		copy(dAtA[i:], m.ExchangeAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExchangeAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TakerAssetAddress) > 0 {
		i -= len(m.TakerAssetAddress)
		copy(dAtA[i:], m.TakerAssetAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TakerAssetAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MakerAssetAddress) > 0 {
		i -= len(m.MakerAssetAddress)
		copy(dAtA[i:], m.MakerAssetAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MakerAssetAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.NotExpired {
		i--
		if m.NotExpired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IsLong {
		i--
		if m.IsLong {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractPriceBound) > 0 {
		i -= len(m.ContractPriceBound)
		copy(dAtA[i:], m.ContractPriceBound)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractPriceBound)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TradePairHash) > 0 {
		i -= len(m.TradePairHash)
		copy(dAtA[i:], m.TradePairHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TradePairHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Collection) > 0 {
		i -= len(m.Collection)
		copy(dAtA[i:], m.Collection)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Collection)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if m.Filters != nil {
		{
			size, err := m.Filters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeRecipientAddress) > 0 {
		i -= len(m.FeeRecipientAddress)
		copy(dAtA[i:], m.FeeRecipientAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeeRecipientAddress)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	if len(m.TraderAddress) > 0 {
		i -= len(m.TraderAddress)
		copy(dAtA[i:], m.TraderAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TraderAddress)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	if len(m.TakerAddress) > 0 {
		i -= len(m.TakerAddress)
		copy(dAtA[i:], m.TakerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TakerAddress)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	if len(m.MakerAddress) > 0 {
		i -= len(m.MakerAddress)
		copy(dAtA[i:], m.MakerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MakerAddress)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	if len(m.TraderAssetData) > 0 {
		i -= len(m.TraderAssetData)
		copy(dAtA[i:], m.TraderAssetData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TraderAssetData)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	if len(m.TakerFeeAssetData) > 0 {
		i -= len(m.TakerFeeAssetData)
		copy(dAtA[i:], m.TakerFeeAssetData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TakerFeeAssetData)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	if len(m.MakerFeeAssetData) > 0 {
		i -= len(m.MakerFeeAssetData)
		copy(dAtA[i:], m.MakerFeeAssetData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MakerFeeAssetData)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	if len(m.TakerAssetData) > 0 {
		i -= len(m.TakerAssetData)
		copy(dAtA[i:], m.TakerAssetData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TakerAssetData)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	if len(m.MakerAssetData) > 0 {
		i -= len(m.MakerAssetData)
		copy(dAtA[i:], m.MakerAssetData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MakerAssetData)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if len(m.ExchangeAddress) > 0 {
		i -= len(m.ExchangeAddress)
		copy(dAtA[i:], m.ExchangeAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExchangeAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	if len(m.TakerAssetAddress) > 0 {
		i -= len(m.TakerAssetAddress)
		copy(dAtA[i:], m.TakerAssetAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TakerAssetAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.MakerAssetAddress) > 0 {
		i -= len(m.MakerAssetAddress)
		copy(dAtA[i:], m.MakerAssetAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MakerAssetAddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.TakerAssetProxyId) > 0 {
		i -= len(m.TakerAssetProxyId)
		copy(dAtA[i:], m.TakerAssetProxyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TakerAssetProxyId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.MakerAssetProxyId) > 0 {
		i -= len(m.MakerAssetProxyId)
		copy(dAtA[i:], m.MakerAssetProxyId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MakerAssetProxyId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.SortByVdf != 0 {
		i = encodeVarintQuery(dAtA, i, uint64((uint32(m.SortByVdf)<<1)^uint32((m.SortByVdf>>31))))
		i--
		dAtA[i] = 0x70
	}
	if len(m.TradePairHash) > 0 {
		i -= len(m.TradePairHash)
		copy(dAtA[i:], m.TradePairHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TradePairHash)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Collection) > 0 {
		i -= len(m.Collection)
		copy(dAtA[i:], m.Collection)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Collection)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFillRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFillRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFillRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderHash) > 0 {
		i -= len(m.OrderHash)
		copy(dAtA[i:], m.OrderHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OrderFillRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderFillRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderFillRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TakerAssetFillAmount) > 0 {
		i -= len(m.TakerAssetFillAmount)
		copy(dAtA[i:], m.TakerAssetFillAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TakerAssetFillAmount)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ExpiryAt != 0 {
		i = encodeVarintQuery(dAtA, i, uint64((uint64(m.ExpiryAt)<<1)^uint64((m.ExpiryAt>>63))))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ApprovalSignatures) > 0 {
		for iNdEx := len(m.ApprovalSignatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ApprovalSignatures[iNdEx])
			copy(dAtA[i:], m.ApprovalSignatures[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ApprovalSignatures[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.OrderHash) > 0 {
		i -= len(m.OrderHash)
		copy(dAtA[i:], m.OrderHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OrderSoftCancelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderSoftCancelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderSoftCancelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApprovalSignatures) > 0 {
		for iNdEx := len(m.ApprovalSignatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ApprovalSignatures[iNdEx])
			copy(dAtA[i:], m.ApprovalSignatures[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ApprovalSignatures[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.OrderHash) > 0 {
		i -= len(m.OrderHash)
		copy(dAtA[i:], m.OrderHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFillRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFillRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFillRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FillRequests) > 0 {
		for iNdEx := len(m.FillRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FillRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutstandingFillRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutstandingFillRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutstandingFillRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutstandingFillRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutstandingFillRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutstandingFillRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FillRequests) > 0 {
		for iNdEx := len(m.FillRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FillRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTradePairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTradePairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTradePairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TakerAssetData) > 0 {
		i -= len(m.TakerAssetData)
		copy(dAtA[i:], m.TakerAssetData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TakerAssetData)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MakerAssetData) > 0 {
		i -= len(m.MakerAssetData)
		copy(dAtA[i:], m.MakerAssetData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MakerAssetData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTradePairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTradePairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTradePairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TakerAssetData) > 0 {
		i -= len(m.TakerAssetData)
		copy(dAtA[i:], m.TakerAssetData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TakerAssetData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MakerAssetData) > 0 {
		i -= len(m.MakerAssetData)
		copy(dAtA[i:], m.MakerAssetData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MakerAssetData)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ticker) > 0 {
		i -= len(m.Ticker)
		copy(dAtA[i:], m.Ticker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Ticker)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Market != nil {
		{
			size, err := m.Market.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTradePairsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTradePairsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTradePairsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTradePairsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTradePairsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTradePairsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryDerivativeMarketsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryDerivativeMarketsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Markets) > 0 {
		for _, e := range m.Markets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryContractSetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryContractSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContractSet != nil {
		l = m.ContractSet.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEvmSyncStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryEvmSyncStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SyncStatus != nil {
		l = m.SyncStatus.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySoftCancelledOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrderHashes) > 0 {
		for _, s := range m.OrderHashes {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.ChainId != 0 {
		n += 1 + sozQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QuerySoftCancelledOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrderHashes) > 0 {
		for _, s := range m.OrderHashes {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryActiveOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryActiveOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryZeroExTransactionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryZeroExTransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxType != 0 {
		n += 1 + sozQuery(uint64(m.TxType))
	}
	if len(m.FillRequests) > 0 {
		for _, e := range m.FillRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.SoftCancelRequests) > 0 {
		for _, e := range m.SoftCancelRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryArchiveOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryArchiveOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OrderFilters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractPriceBound)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IsLong {
		n += 2
	}
	if m.NotExpired {
		n += 2
	}
	l = len(m.MakerAssetAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TakerAssetAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ExchangeAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MakerAssetData)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TakerAssetData)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MakerAssetAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TakerAssetAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MakerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.NotMakerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TakerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TraderAddress)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	l = len(m.FeeRecipientAddress)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	l = len(m.MakerFeeAssetData)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	l = len(m.TakerFeeAssetData)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filters != nil {
		l = m.Filters.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Collection)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TradePairHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpotOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Collection)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TradePairHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.SortByVdf != 0 {
		n += 1 + sozQuery(uint64(m.SortByVdf))
	}
	l = len(m.MakerAssetProxyId)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	l = len(m.TakerAssetProxyId)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	l = len(m.MakerAssetAddress)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	l = len(m.TakerAssetAddress)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	l = len(m.ExchangeAddress)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	l = len(m.SenderAddress)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	l = len(m.MakerAssetData)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	l = len(m.TakerAssetData)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	l = len(m.MakerFeeAssetData)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	l = len(m.TakerFeeAssetData)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	l = len(m.TraderAssetData)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	l = len(m.MakerAddress)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	l = len(m.TakerAddress)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	l = len(m.TraderAddress)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	l = len(m.FeeRecipientAddress)
	if l > 0 {
		n += 2 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpotOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFillRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OrderFillRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OrderHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.ApprovalSignatures) > 0 {
		for _, s := range m.ApprovalSignatures {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.ExpiryAt != 0 {
		n += 1 + sozQuery(uint64(m.ExpiryAt))
	}
	l = len(m.TakerAssetFillAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OrderSoftCancelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OrderHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.ApprovalSignatures) > 0 {
		for _, s := range m.ApprovalSignatures {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFillRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FillRequests) > 0 {
		for _, e := range m.FillRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOutstandingFillRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOutstandingFillRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FillRequests) > 0 {
		for _, e := range m.FillRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTradePairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MakerAssetData)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TakerAssetData)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTradePairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MakerAssetData)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TakerAssetData)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	return n
}

func (m *QueryDerivativeMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Ticker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDerivativeMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Market != nil {
		l = m.Market.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTradePairsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTradePairsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDerivativeOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryDerivativeMarketsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeMarketsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeMarketsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeMarketsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeMarketsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeMarketsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Markets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Markets = append(m.Markets, &DerivativeMarket{})
			if err := m.Markets[len(m.Markets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryContractSetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryContractSetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryContractSetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryContractSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryContractSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryContractSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContractSet == nil {
				m.ContractSet = &ContractSet{}
			}
			if err := m.ContractSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEvmSyncStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEvmSyncStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEvmSyncStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEvmSyncStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEvmSyncStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEvmSyncStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyncStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SyncStatus == nil {
				m.SyncStatus = &EvmSyncStatus{}
			}
			if err := m.SyncStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySoftCancelledOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySoftCancelledOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySoftCancelledOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderHashes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderHashes = append(m.OrderHashes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.ChainId = int64(v)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySoftCancelledOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySoftCancelledOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySoftCancelledOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderHashes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderHashes = append(m.OrderHashes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &Order{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &Order{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryZeroExTransactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryZeroExTransactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryZeroExTransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryZeroExTransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryZeroExTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryZeroExTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxType", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.TxType = int64(v)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FillRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FillRequests = append(m.FillRequests, &OrderFillRequest{})
			if err := m.FillRequests[len(m.FillRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftCancelRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SoftCancelRequests = append(m.SoftCancelRequests, &OrderSoftCancelRequest{})
			if err := m.SoftCancelRequests[len(m.SoftCancelRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryArchiveOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryArchiveOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryArchiveOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryArchiveOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryArchiveOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryArchiveOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Order == nil {
				m.Order = &Order{}
			}
			if err := m.Order.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractPriceBound", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractPriceBound = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLong", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLong = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotExpired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotExpired = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerAssetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MakerAssetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerAssetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerAssetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerAssetData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MakerAssetData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerAssetData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerAssetData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerAssetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MakerAssetAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerAssetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerAssetAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MakerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotMakerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotMakerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRecipientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeRecipientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerFeeAssetData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MakerFeeAssetData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerFeeAssetData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerFeeAssetData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filters == nil {
				m.Filters = &OrderFilters{}
			}
			if err := m.Filters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collection = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradePairHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradePairHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collection = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradePairHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradePairHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortByVdf", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.SortByVdf = v
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerAssetProxyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MakerAssetProxyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerAssetProxyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerAssetProxyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerAssetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MakerAssetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerAssetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerAssetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerAssetData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MakerAssetData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerAssetData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerAssetData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerFeeAssetData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MakerFeeAssetData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerFeeAssetData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerFeeAssetData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraderAssetData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraderAssetData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MakerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRecipientAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeRecipientAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &Order{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFillRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFillRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFillRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderFillRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderFillRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderFillRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovalSignatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovalSignatures = append(m.ApprovalSignatures, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryAt", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.ExpiryAt = int64(v)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerAssetFillAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerAssetFillAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderSoftCancelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderSoftCancelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderSoftCancelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApprovalSignatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApprovalSignatures = append(m.ApprovalSignatures, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFillRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFillRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFillRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FillRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FillRequests = append(m.FillRequests, &OrderFillRequest{})
			if err := m.FillRequests[len(m.FillRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutstandingFillRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutstandingFillRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutstandingFillRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutstandingFillRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutstandingFillRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutstandingFillRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FillRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FillRequests = append(m.FillRequests, &OrderFillRequest{})
			if err := m.FillRequests[len(m.FillRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTradePairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTradePairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTradePairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerAssetData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MakerAssetData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerAssetData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerAssetData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTradePairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTradePairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTradePairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerAssetData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MakerAssetData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerAssetData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerAssetData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Market == nil {
				m.Market = &DerivativeMarket{}
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTradePairsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTradePairsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTradePairsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTradePairsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTradePairsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTradePairsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &TradePair{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &Order{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
